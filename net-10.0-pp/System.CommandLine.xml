<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.CommandLine</name>
  </assembly>
  <members>
    <member name="T:System.CommandLine.Argument">
      <summary>A symbol defining a value that can be passed on the command line to a <see cref="T:System.CommandLine.Command">command</see> or <see cref="T:System.CommandLine.Option">option</see>.</summary>
    </member>
    <member name="M:System.CommandLine.Argument.#ctor">
      <summary>Initializes a new instance of the Argument class.</summary>
    </member>
    <member name="M:System.CommandLine.Argument.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the Argument class.</summary>
      <param name="name">The name of the argument.</param>
      <param name="description">The description of the argument, shown in help.</param>
    </member>
    <member name="M:System.CommandLine.Argument.AddValidator(System.CommandLine.Parsing.ValidateSymbolResult{System.CommandLine.Parsing.ArgumentResult})">
      <summary>Adds a custom <see cref="T:System.CommandLine.Parsing.ValidateSymbolResult`1" /> to the argument. Validators can be used
            to provide custom errors based on user input.</summary>
      <param name="validate">The delegate to validate the parsed argument.</param>
    </member>
    <member name="M:System.CommandLine.Argument.GetCompletions(System.CommandLine.Completions.CompletionContext)">
      <summary>Gets the suggested values for command line completion.</summary>
      <param name="context" />
      <returns>A list of completion items.</returns>
    </member>
    <member name="M:System.CommandLine.Argument.GetDefaultValue">
      <summary>Gets the default value for the argument.</summary>
      <returns>Returns the default value for the argument, if defined. Null otherwise.</returns>
    </member>
    <member name="M:System.CommandLine.Argument.SetDefaultValue(System.Object)">
      <summary>Sets the default value for the argument.</summary>
      <param name="value">The default value for the argument.</param>
    </member>
    <member name="M:System.CommandLine.Argument.SetDefaultValueFactory(System.Func{System.CommandLine.Parsing.ArgumentResult,System.Object})">
      <summary>Sets a delegate to invoke when the default value for the argument is required.</summary>
      <param name="getDefaultValue">The delegate to invoke to return the default value.</param>
    </member>
    <member name="M:System.CommandLine.Argument.SetDefaultValueFactory(System.Func{System.Object})">
      <summary>Sets a delegate to invoke when the default value for the argument is required.</summary>
      <param name="getDefaultValue">The delegate to invoke to return the default value.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="getDefaultValue" /> is null.</exception>
    </member>
    <member name="M:System.CommandLine.Argument.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:System.CommandLine.Argument.Arity">
      <summary>Gets or sets the arity of the argument.</summary>
    </member>
    <member name="P:System.CommandLine.Argument.Completions">
      <summary>Gets the list of completion sources for the argument.</summary>
    </member>
    <member name="P:System.CommandLine.Argument.HasDefaultValue">
      <summary>Specifies if a default value is defined for the argument.</summary>
    </member>
    <member name="P:System.CommandLine.Argument.HelpName">
      <summary>The name used in help output to describe the argument.</summary>
    </member>
    <member name="P:System.CommandLine.Argument.System#CommandLine#Binding#IValueDescriptor#ValueName">
      <summary>Gets the name of the value.</summary>
    </member>
    <member name="P:System.CommandLine.Argument.ValueType">
      <summary>Gets or sets the <see cref="T:System.Type" /> that the argument token(s) will be converted to.</summary>
    </member>
    <member name="T:System.CommandLine.Argument`1">
      <summary>A symbol defining a value that can be passed on the command line to a System.CommandLine.Command?text=command or System.CommandLine.Option?text=option.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.CommandLine.Argument`1.#ctor">
      <summary>Initializes a new instance of the Argument class.</summary>
    </member>
    <member name="M:System.CommandLine.Argument`1.#ctor(System.CommandLine.Parsing.ParseArgument{`0},System.Boolean)">
      <summary>Initializes a new instance of the Argument class.</summary>
      <param name="parse">A custom argument parser.</param>
      <param name="isDefault">
        <see langword="true" /> to use the <paramref name="parse" /> result as default value.</param>
    </member>
    <member name="M:System.CommandLine.Argument`1.#ctor(System.Func{`0})">
      <summary>Initializes a new instance of the Argument class.</summary>
      <param name="getDefaultValue">The delegate to invoke to return the default value.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="getDefaultValue" /> is null.</exception>
    </member>
    <member name="M:System.CommandLine.Argument`1.#ctor(System.String,System.CommandLine.Parsing.ParseArgument{`0},System.Boolean,System.String)">
      <summary>Initializes a new instance of the Argument class.</summary>
      <param name="name">The name of the argument.</param>
      <param name="parse">A custom argument parser.</param>
      <param name="isDefault">
        <see langword="true" /> to use the <paramref name="parse" /> result as default value.</param>
      <param name="description">The description of the argument, shown in help.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="parse" /> is null.</exception>
    </member>
    <member name="M:System.CommandLine.Argument`1.#ctor(System.String,System.Func{`0},System.String)">
      <summary>Initializes a new instance of the Argument class.</summary>
      <param name="name">The name of the argument.</param>
      <param name="getDefaultValue">The delegate to invoke to return the default value.</param>
      <param name="description">The description of the argument, shown in help.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="getDefaultValue" /> is null.</exception>
    </member>
    <member name="M:System.CommandLine.Argument`1.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the Argument class.</summary>
      <param name="name">The name of the argument.</param>
      <param name="description">The description of the argument, shown in help.</param>
    </member>
    <member name="P:System.CommandLine.Argument`1.ValueType">
      <summary>The type of the value.</summary>
    </member>
    <member name="T:System.CommandLine.ArgumentArity">
      <summary>Defines the arity of an option or argument.</summary>
    </member>
    <member name="M:System.CommandLine.ArgumentArity.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the ArgumentArity class.</summary>
      <param name="minimumNumberOfValues">The minimum number of values required for the argument.</param>
      <param name="maximumNumberOfValues">The maximum number of values allowed for the argument.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="minimumNumberOfValues" /> is negative.</exception>
      <exception cref="T:System.ArgumentException">Thrown when the maximum number is less than the minimum number or the maximum number is greater than MaximumArity.</exception>
    </member>
    <member name="M:System.CommandLine.ArgumentArity.Equals(System.CommandLine.ArgumentArity)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CommandLine.ArgumentArity.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <code data-dev-comment-type="langword">true</code> if <code data-dev-comment-type="paramref">obj</code> and this instance are the same type and represent the same value; otherwise, <code data-dev-comment-type="langword">false</code>.</returns>
    </member>
    <member name="M:System.CommandLine.ArgumentArity.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="P:System.CommandLine.ArgumentArity.ExactlyOne">
      <summary>An arity that must have exactly one value.</summary>
    </member>
    <member name="P:System.CommandLine.ArgumentArity.MaximumNumberOfValues">
      <summary>Gets the maximum number of values allowed for an <see cref="T:System.CommandLine.Argument">argument</see>.</summary>
    </member>
    <member name="P:System.CommandLine.ArgumentArity.MinimumNumberOfValues">
      <summary>Gets the minimum number of values required for an <see cref="T:System.CommandLine.Argument">argument</see>.</summary>
    </member>
    <member name="P:System.CommandLine.ArgumentArity.OneOrMore">
      <summary>An arity that must have at least one value.</summary>
    </member>
    <member name="P:System.CommandLine.ArgumentArity.Zero">
      <summary>An arity that does not allow any values.</summary>
    </member>
    <member name="P:System.CommandLine.ArgumentArity.ZeroOrMore">
      <summary>An arity that may have multiple values.</summary>
    </member>
    <member name="P:System.CommandLine.ArgumentArity.ZeroOrOne">
      <summary>An arity that may have one value, but no more than one.</summary>
    </member>
    <member name="T:System.CommandLine.ArgumentExtensions">
      <summary>Provides extension methods for <see cref="T:System.CommandLine.Argument" />.</summary>
    </member>
    <member name="M:System.CommandLine.ArgumentExtensions.AddCompletions``1(``0,System.CommandLine.Completions.CompletionDelegate)">
      <summary>Adds completions for an argument.</summary>
      <param name="argument">The argument for which to add completions.</param>
      <param name="complete">A <see cref="T:System.CommandLine.Completions.CompletionDelegate" /> that will be called to provide completions.</param>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <returns>The configured argument.</returns>
    </member>
    <member name="M:System.CommandLine.ArgumentExtensions.AddCompletions``1(``0,System.Func{System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable{System.String}})">
      <summary>Adds completions for an option.</summary>
      <param name="argument">The argument for which to add completions.</param>
      <param name="complete">A <see cref="T:System.CommandLine.Completions.CompletionDelegate" /> that will be called to provide completions.</param>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <returns>The option being extended.</returns>
    </member>
    <member name="M:System.CommandLine.ArgumentExtensions.AddCompletions``1(``0,System.String[])">
      <summary>Adds completions for an argument.</summary>
      <param name="argument">The argument for which to add completions.</param>
      <param name="values">The completions to add.</param>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <returns>The configured argument.</returns>
    </member>
    <member name="M:System.CommandLine.ArgumentExtensions.ExistingOnly(System.CommandLine.Argument{System.IO.DirectoryInfo})">
      <summary>Configures an argument to accept only values corresponding to an existing directory.</summary>
      <param name="argument">The argument to configure.</param>
      <returns>The configured argument.</returns>
    </member>
    <member name="M:System.CommandLine.ArgumentExtensions.ExistingOnly(System.CommandLine.Argument{System.IO.FileInfo})">
      <summary>Configures an argument to accept only values corresponding to an existing file.</summary>
      <param name="argument">The argument to configure.</param>
      <returns>The configured argument.</returns>
    </member>
    <member name="M:System.CommandLine.ArgumentExtensions.ExistingOnly(System.CommandLine.Argument{System.IO.FileSystemInfo})">
      <summary>Configures an argument to accept only values corresponding to an existing file or directory.</summary>
      <param name="argument">The argument to configure.</param>
      <returns>The configured argument.</returns>
    </member>
    <member name="M:System.CommandLine.ArgumentExtensions.ExistingOnly``1(System.CommandLine.Argument{``0})">
      <summary>Configures an argument to accept only values corresponding to a existing files or directories.</summary>
      <param name="argument">The argument to configure.</param>
      <typeparam name="T" />
      <returns>The configured argument.</returns>
    </member>
    <member name="M:System.CommandLine.ArgumentExtensions.FromAmong``1(``0,System.String[])">
      <summary>Configures an argument to accept only the specified values, and to suggest them as command line completions.</summary>
      <param name="argument">The argument to configure.</param>
      <param name="values">The values that are allowed for the argument.</param>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <returns>The configured argument.</returns>
    </member>
    <member name="M:System.CommandLine.ArgumentExtensions.LegalFileNamesOnly``1(``0)">
      <summary>Configures an argument to accept only values representing legal file names.</summary>
      <param name="argument">The argument to configure.</param>
      <typeparam name="TArgument" />
      <returns>The configured argument.</returns>
    </member>
    <member name="M:System.CommandLine.ArgumentExtensions.LegalFilePathsOnly``1(``0)">
      <summary>Configures an argument to accept only values representing legal file paths.</summary>
      <param name="argument">The argument to configure.</param>
      <typeparam name="TArgument" />
      <returns>The configured argument.</returns>
    </member>
    <member name="M:System.CommandLine.ArgumentExtensions.Parse(System.CommandLine.Argument,System.String)">
      <summary>Parses a command line string value using an argument.</summary>
      <param name="argument">The argument to use to parse the command line input.</param>
      <param name="commandLine">A command line string to parse, which can include spaces and quotes equivalent to what can be entered into a terminal.</param>
      <returns>A parse result describing the outcome of the parse operation.</returns>
    </member>
    <member name="M:System.CommandLine.ArgumentExtensions.Parse(System.CommandLine.Argument,System.String[])">
      <summary>Parses a command line string value using an argument.</summary>
      <param name="argument">The argument to use to parse the command line input.</param>
      <param name="args">The string arguments to parse.</param>
      <returns>A parse result describing the outcome of the parse operation.</returns>
    </member>
    <member name="T:System.CommandLine.Binding.BinderBase`1">
      <summary>Supports binding of custom types.</summary>
      <typeparam name="T">The type to be bound.</typeparam>
    </member>
    <member name="M:System.CommandLine.Binding.BinderBase`1.#ctor" />
    <member name="M:System.CommandLine.Binding.BinderBase`1.GetBoundValue(System.CommandLine.Binding.BindingContext)">
      <summary>Gets a value from the binding context.</summary>
      <param name="bindingContext" />
      <returns />
    </member>
    <member name="M:System.CommandLine.Binding.BinderBase`1.System#CommandLine#Binding#IValueDescriptor#GetDefaultValue">
      <summary>Gets the default value, if any.</summary>
      <returns>An object representing the default value.</returns>
    </member>
    <member name="M:System.CommandLine.Binding.BinderBase`1.System#CommandLine#Binding#IValueSource#TryGetValue(System.CommandLine.Binding.IValueDescriptor,System.CommandLine.Binding.BindingContext,System.Object@)">
      <summary>Tries to get a value from a binding context. The return value indicates whether a value matching the specified value descriptor was present.</summary>
      <param name="valueDescriptor">The descriptor for the value to be bound.</param>
      <param name="bindingContext">The binding context from which to bind the value.</param>
      <param name="boundValue">When this method returns, contains the bound value.</param>
      <returns>
        <see langword="true" /> if a matching value was found; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CommandLine.Binding.BinderBase`1.System#CommandLine#Binding#IValueDescriptor#HasDefaultValue">
      <summary>Gets a value that specifies whether there is a default value.</summary>
    </member>
    <member name="P:System.CommandLine.Binding.BinderBase`1.System#CommandLine#Binding#IValueDescriptor#ValueName">
      <summary>Gets the name of the value.</summary>
    </member>
    <member name="P:System.CommandLine.Binding.BinderBase`1.System#CommandLine#Binding#IValueDescriptor#ValueType">
      <summary>Gets the type of the value.</summary>
    </member>
    <member name="T:System.CommandLine.Binding.BindingContext">
      <summary>Creates object instances based on command line parser results, injected services, and other value sources.</summary>
    </member>
    <member name="M:System.CommandLine.Binding.BindingContext.AddService(System.Type,System.Func{System.IServiceProvider,System.Object})">
      <summary>Adds the specified service factory to the binding context.</summary>
      <param name="serviceType">The type for which this service factory will provide an instance.</param>
      <param name="factory">A delegate that provides an instance of the specified service type.</param>
    </member>
    <member name="M:System.CommandLine.Binding.BindingContext.AddService``1(System.Func{System.IServiceProvider,``0})">
      <summary>Adds the specified service factory to the binding context.</summary>
      <param name="factory">A delegate that provides an instance of the specified service type.</param>
      <typeparam name="T">The type for which this service factory will provide an instance.</typeparam>
    </member>
    <member name="M:System.CommandLine.Binding.BindingContext.GetService(System.Type)">
      <summary>Gets the service object of the specified type.</summary>
      <param name="serviceType">An object that specifies the type of service object to get.</param>
      <returns>A service object of type <paramref name="serviceType" />.

 -or-

 <see langword="null" /> if there is no service object of type <paramref name="serviceType" />.</returns>
    </member>
    <member name="P:System.CommandLine.Binding.BindingContext.Console">
      <summary>The console to which output should be written during the current invocation.</summary>
    </member>
    <member name="P:System.CommandLine.Binding.BindingContext.ParseResult">
      <summary>The parse result for the current invocation.</summary>
    </member>
    <member name="T:System.CommandLine.Binding.BoundValue">
      <summary>A value created by binding command line input.</summary>
    </member>
    <member name="M:System.CommandLine.Binding.BoundValue.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="P:System.CommandLine.Binding.BoundValue.Value">
      <summary>The value bound from the specified source.</summary>
    </member>
    <member name="P:System.CommandLine.Binding.BoundValue.ValueDescriptor">
      <summary>The descriptor for the bound value.</summary>
    </member>
    <member name="P:System.CommandLine.Binding.BoundValue.ValueSource">
      <summary>The source from which the value was bound.</summary>
    </member>
    <member name="T:System.CommandLine.Binding.IValueDescriptor">
      <summary>Describes and provides access to a bindable named value.</summary>
    </member>
    <member name="M:System.CommandLine.Binding.IValueDescriptor.GetDefaultValue">
      <summary>Gets the default value, if any.</summary>
    </member>
    <member name="P:System.CommandLine.Binding.IValueDescriptor.HasDefaultValue">
      <summary>Gets a value determining whether there is a default value.</summary>
    </member>
    <member name="P:System.CommandLine.Binding.IValueDescriptor.ValueName">
      <summary>The name of the value.</summary>
    </member>
    <member name="P:System.CommandLine.Binding.IValueDescriptor.ValueType">
      <summary>The type of the value.</summary>
    </member>
    <member name="T:System.CommandLine.Binding.IValueDescriptor`1">
      <summary>Describes and provides access to a bindable named value.</summary>
      <typeparam name="T" />
    </member>
    <member name="T:System.CommandLine.Binding.IValueSource">
      <summary>Binds a value from a <see cref="T:System.CommandLine.Binding.BindingContext" /> based on a <see cref="T:System.CommandLine.Binding.IValueDescriptor" />.</summary>
    </member>
    <member name="M:System.CommandLine.Binding.IValueSource.TryGetValue(System.CommandLine.Binding.IValueDescriptor,System.CommandLine.Binding.BindingContext,System.Object@)">
      <summary>Gets a value from a binding context. A return value indicates whether a value matching the specified value descriptor was present.</summary>
      <param name="valueDescriptor">The descriptor for the value to be bound.</param>
      <param name="bindingContext">The binding context from which to bind the value.</param>
      <param name="boundValue">The bound value.</param>
      <returns>
        <see langword="true" /> if a matching value was found; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.CommandLine.Builder.CommandLineBuilder">
      <summary>Enables composition of command line configurations.</summary>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilder.#ctor(System.CommandLine.Command)">
      <param name="rootCommand">The root command of the application.</param>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilder.Build">
      <summary>Creates a parser based on the configuration of the command line builder.</summary>
    </member>
    <member name="P:System.CommandLine.Builder.CommandLineBuilder.Command">
      <summary>The command that the builder uses the root of the parser.</summary>
    </member>
    <member name="T:System.CommandLine.Builder.CommandLineBuilderExtensions">
      <summary>Provides extension methods for <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</summary>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.AddMiddleware(System.CommandLine.Builder.CommandLineBuilder,System.Action{System.CommandLine.Invocation.InvocationContext},System.CommandLine.Invocation.MiddlewareOrder)">
      <summary>Adds a middleware delegate to the invocation pipeline called before a command handler is invoked.</summary>
      <param name="onInvoke">A delegate that will be invoked before a call to a command handler.</param>
      <param name="order">A value indicating the order in which the added delegate will be invoked relative to others in the pipeline.</param>
      <param name="builder">A command line builder.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.AddMiddleware(System.CommandLine.Builder.CommandLineBuilder,System.CommandLine.Invocation.InvocationMiddleware,System.CommandLine.Invocation.MiddlewareOrder)">
      <summary>Adds a middleware delegate to the invocation pipeline called before a command handler is invoked.</summary>
      <param name="builder">A command line builder.</param>
      <param name="middleware">A delegate that will be invoked before a call to a command handler.</param>
      <param name="order">A value indicating the order in which the added delegate will be invoked relative to others in the pipeline.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.CancelOnProcessTermination(System.CommandLine.Builder.CommandLineBuilder)">
      <summary>Enables signaling and handling of process termination via a <see cref="T:System.Threading.CancellationToken" /> that can be passed to a <see cref="T:System.CommandLine.Invocation.ICommandHandler" /> during invocation.</summary>
      <param name="builder">A command line builder.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.EnableDirectives(System.CommandLine.Builder.CommandLineBuilder,System.Boolean)">
      <summary>Enables the parser to recognize command line directives.</summary>
      <param name="builder">A command line builder.</param>
      <param name="value">
        <see langword="true" /> to enable directives. <see langword="false" /> to parse directive-like tokens in the same way as any other token.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.EnableLegacyDoubleDashBehavior(System.CommandLine.Builder.CommandLineBuilder,System.Boolean)">
      <summary>Determines the behavior when parsing a double dash (<c>--</c>) in a command line.</summary>
      <param name="builder">A command line builder.</param>
      <param name="value">
        <see langword="true" /> to place all tokens following <c>--</c> into the <see cref="P:System.CommandLine.Parsing.ParseResult.UnparsedTokens" /> collection. <see langword="false" /> to treat all tokens following <c>--</c> as command arguments, even if they match an existing option.</param>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.EnablePosixBundling(System.CommandLine.Builder.CommandLineBuilder,System.Boolean)">
      <summary>Enables the parser to recognize and expand POSIX-style bundled options.</summary>
      <param name="builder">A command line builder.</param>
      <param name="value">
        <see langword="true" /> to parse POSIX bundles; otherwise, <see langword="false" />.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.RegisterWithDotnetSuggest(System.CommandLine.Builder.CommandLineBuilder)">
      <summary>Ensures that the application is registered with the <c>dotnet-suggest</c> tool to enable command line completions.</summary>
      <param name="builder">A command line builder.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseDefaults(System.CommandLine.Builder.CommandLineBuilder)">
      <summary>Uses the default configuration.</summary>
      <param name="builder">A command line builder.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseEnvironmentVariableDirective(System.CommandLine.Builder.CommandLineBuilder)">
      <summary>Enables the use of the <c>[env:key=value]</c> directive, allowing environment variables to be set from the command line during invocation.</summary>
      <param name="builder">A command line builder.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseExceptionHandler(System.CommandLine.Builder.CommandLineBuilder,System.Action{System.Exception,System.CommandLine.Invocation.InvocationContext},System.Nullable{System.Int32})">
      <summary>Enables an exception handler to catch any unhandled exceptions thrown by a command handler during invocation.</summary>
      <param name="builder">A command line builder.</param>
      <param name="onException">A delegate that will be called when an exception is thrown by a command handler.</param>
      <param name="errorExitCode">The exit code to be used when an exception is thrown.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseHelp(System.CommandLine.Builder.CommandLineBuilder,System.Action{System.CommandLine.Help.HelpContext},System.Nullable{System.Int32})">
      <summary>Configures the application to show help when one of the specified option aliases are used on the command line.</summary>
      <param name="builder">A command line builder.</param>
      <param name="customize">A delegate that will be called to customize help if help is requested.</param>
      <param name="maxWidth">Maximum output width for default help builder.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseHelp(System.CommandLine.Builder.CommandLineBuilder,System.Nullable{System.Int32})">
      <summary>Configures the application to show help when one of the following options are specified on the command line:
            <code>-h
               /h
               --help
               -?
               /?</code></summary>
      <param name="builder">A command line builder.</param>
      <param name="maxWidth">Maximum output width for default help builder.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseHelp(System.CommandLine.Builder.CommandLineBuilder,System.String[])">
      <summary>Configures the application to show help when one of the specified option aliases are used on the command line.</summary>
      <param name="builder">A command line builder.</param>
      <param name="helpAliases">The set of aliases that can be specified on the command line to request help.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseHelpBuilder``1(``0,System.Func{System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder})">
      <summary>Specifies an <see cref="T:System.CommandLine.Help.HelpBuilder" /> to be used to format help output when help is requested.</summary>
      <param name="builder">A command line builder.</param>
      <param name="getHelpBuilder">A delegate that returns an instance of <see cref="T:System.CommandLine.Help.HelpBuilder" /></param>
      <typeparam name="TBuilder" />
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseLocalizationResources(System.CommandLine.Builder.CommandLineBuilder,System.CommandLine.LocalizationResources)">
      <summary>Specifies localization resources to be used when displaying help, error messages, and other user-facing strings.</summary>
      <param name="builder">A command line builder.</param>
      <param name="validationMessages">The localizations resources to use.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseParseDirective(System.CommandLine.Builder.CommandLineBuilder,System.Nullable{System.Int32})">
      <summary>Enables the use of the <c>[parse]</c> directive, which when specified on the command line will short circuit normal command handling and display a diagram explaining the parse result for the command line input.</summary>
      <param name="builder">A command line builder.</param>
      <param name="errorExitCode">If the parse result contains errors, this exit code will be used when the process exits.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseParseErrorReporting(System.CommandLine.Builder.CommandLineBuilder,System.Nullable{System.Int32})">
      <summary>Configures the command line to write error information to standard error when there are errors parsing command line input.</summary>
      <param name="errorExitCode">The exit code to use when parser errors occur.</param>
      <param name="builder">A command line builder.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseSuggestDirective(System.CommandLine.Builder.CommandLineBuilder)">
      <summary>Enables the use of the <c>[suggest]</c> directive which when specified in command line input short circuits normal command handling and writes a newline-delimited list of suggestions suitable for use by most shells to provide command line completions.</summary>
      <param name="builder">A command line builder.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseTokenReplacer(System.CommandLine.Builder.CommandLineBuilder,System.CommandLine.Parsing.TryReplaceToken)">
      <summary>Specifies a delegate used to replace any token prefixed with <code>@</code> with zero or more other tokens, prior to parsing.</summary>
      <param name="builder">A command line builder.</param>
      <param name="replaceToken">Replaces the specified token with any number of other tokens.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseTypoCorrections(System.CommandLine.Builder.CommandLineBuilder,System.Int32)">
      <summary>Configures the application to provide alternative suggestions when a parse error is detected.</summary>
      <param name="builder">A command line builder.</param>
      <param name="maxLevenshteinDistance">The maximum Levenshtein distance for suggestions based on detected typos in command line input.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseVersionOption(System.CommandLine.Builder.CommandLineBuilder,System.String[])">
      <summary>Enables the use of a option (defaulting to the alias <code data-dev-comment-type="c">--version</code>) which when specified in command line input will short circuit normal command handling and instead write out version information before exiting.</summary>
      <param name="aliases">One or more aliases to use instead of the default to signal that version information should be displayed.</param>
      <param name="builder">A command line builder.</param>
      <returns>The same instance of <xref data-throw-if-not-resolved="true" uid="System.CommandLine.Builder.CommandLineBuilder"></xref>.</returns>
    </member>
    <member name="M:System.CommandLine.Builder.CommandLineBuilderExtensions.UseVersionOption(System.CommandLine.Builder.CommandLineBuilder)">
      <summary>Enables the use of a option (defaulting to the alias <c>--version</c>) which when specified in command line input will short circuit normal command handling and instead write out version information before exiting.</summary>
      <param name="builder">A command line builder.</param>
      <returns>The same instance of <see cref="T:System.CommandLine.Builder.CommandLineBuilder" />.</returns>
    </member>
    <member name="T:System.CommandLine.Command">
      <summary>Represents a specific action that the application performs.</summary>
    </member>
    <member name="M:System.CommandLine.Command.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the Command class.</summary>
      <param name="name">The name of the command.</param>
      <param name="description">The description of the command, shown in help.</param>
    </member>
    <member name="M:System.CommandLine.Command.Add(System.CommandLine.Argument)">
      <summary>Adds an <see cref="T:System.CommandLine.Argument" /> to the command.</summary>
      <param name="argument">The argument to add to the command.</param>
    </member>
    <member name="M:System.CommandLine.Command.Add(System.CommandLine.Command)">
      <summary>Adds a subcommand to the command.</summary>
      <param name="command">The subcommand to add to the command.</param>
    </member>
    <member name="M:System.CommandLine.Command.Add(System.CommandLine.Option)">
      <summary>Adds an <see cref="T:System.CommandLine.Option" /> to the command.</summary>
      <param name="option">The option to add to the command.</param>
    </member>
    <member name="M:System.CommandLine.Command.AddArgument(System.CommandLine.Argument)">
      <summary>Adds an <see cref="T:System.CommandLine.Argument" /> to the command.</summary>
      <param name="argument">The argument to add to the command.</param>
    </member>
    <member name="M:System.CommandLine.Command.AddCommand(System.CommandLine.Command)">
      <summary>Adds a subcommand to the command.</summary>
      <param name="command">The subcommand to add to the command.</param>
    </member>
    <member name="M:System.CommandLine.Command.AddGlobalOption(System.CommandLine.Option)">
      <summary>Adds a global <see cref="T:System.CommandLine.Option" /> to the command.</summary>
      <param name="option">The global option to add to the command.</param>
    </member>
    <member name="M:System.CommandLine.Command.AddOption(System.CommandLine.Option)">
      <summary>Adds an <see cref="T:System.CommandLine.Option" /> to the command.</summary>
      <param name="option">The option to add to the command.</param>
    </member>
    <member name="M:System.CommandLine.Command.AddValidator(System.CommandLine.Parsing.ValidateSymbolResult{System.CommandLine.Parsing.CommandResult})">
      <summary>Adds a custom validator to the command. Validators can be used
            to create custom validation logic.</summary>
      <param name="validate">The delegate to validate the symbols during parsing.</param>
    </member>
    <member name="M:System.CommandLine.Command.GetCompletions(System.CommandLine.Completions.CompletionContext)">
      <summary>Gets the suggested values for command line completion.</summary>
      <param name="context" />
      <returns>A list of completion items.</returns>
    </member>
    <member name="M:System.CommandLine.Command.GetEnumerator">
      <summary>Represents all of the symbols for the command.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.CommandLine.Command.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.CommandLine.Command.Arguments">
      <summary>Represents all of the arguments for the command.</summary>
    </member>
    <member name="P:System.CommandLine.Command.Children">
      <summary>Gets the child symbols.</summary>
    </member>
    <member name="P:System.CommandLine.Command.Handler">
      <summary>Gets or sets the <see cref="T:System.CommandLine.Invocation.ICommandHandler" /> for the command. The handler represents the action
            that will be performed when the command is invoked.</summary>
    </member>
    <member name="P:System.CommandLine.Command.Options">
      <summary>Represents all of the options for the command, including global options that have been applied to any of the command's ancestors.</summary>
    </member>
    <member name="P:System.CommandLine.Command.Subcommands">
      <summary>Represents all of the subcommands for the command.</summary>
    </member>
    <member name="P:System.CommandLine.Command.TreatUnmatchedTokensAsErrors">
      <summary>Gets or sets a value that indicates whether unmatched tokens should be treated as errors. For example,
            if set to <see langword="true" /> and an extra command or argument is provided, validation will fail.</summary>
    </member>
    <member name="T:System.CommandLine.CommandExtensions">
      <summary>Provides extension methods for <see cref="T:System.CommandLine.Command" />.</summary>
    </member>
    <member name="M:System.CommandLine.CommandExtensions.Invoke(System.CommandLine.Command,System.String,System.CommandLine.IConsole)">
      <summary>Parses and invokes a command.</summary>
      <param name="command">The command to invoke.</param>
      <param name="commandLine">The command line to parse.</param>
      <param name="console">The console to which output is written during invocation.</param>
      <returns>The exit code for the invocation.</returns>
    </member>
    <member name="M:System.CommandLine.CommandExtensions.Invoke(System.CommandLine.Command,System.String[],System.CommandLine.IConsole)">
      <summary>Parses and invokes a command.</summary>
      <param name="command">The command to invoke.</param>
      <param name="args">The arguments to parse.</param>
      <param name="console">The console to which output is written during invocation.</param>
      <returns>The exit code for the invocation.</returns>
    </member>
    <member name="M:System.CommandLine.CommandExtensions.InvokeAsync(System.CommandLine.Command,System.String,System.CommandLine.IConsole)">
      <summary>Parses and invokes a command.</summary>
      <param name="command">The command to invoke.</param>
      <param name="commandLine">The command line to parse.</param>
      <param name="console">The console to which output is written during invocation.</param>
      <returns>The exit code for the invocation.</returns>
    </member>
    <member name="M:System.CommandLine.CommandExtensions.InvokeAsync(System.CommandLine.Command,System.String[],System.CommandLine.IConsole)">
      <summary>Parses and invokes a command.</summary>
      <param name="command">The command to invoke.</param>
      <param name="args">The arguments to parse.</param>
      <param name="console">The console to which output is written during invocation.</param>
      <returns>The exit code for the invocation.</returns>
    </member>
    <member name="M:System.CommandLine.CommandExtensions.Parse(System.CommandLine.Command,System.String)">
      <summary>Parses a command line string value using the specified command.</summary>
      <param name="command">The command to use to parse the command line input.</param>
      <param name="commandLine">A command line string to parse, which can include spaces and quotes equivalent to what can be entered into a terminal.</param>
      <returns>A parse result describing the outcome of the parse operation.</returns>
    </member>
    <member name="M:System.CommandLine.CommandExtensions.Parse(System.CommandLine.Command,System.String[])">
      <summary>Parses an array strings using the specified command.</summary>
      <param name="command">The command to use to parse the command line input.</param>
      <param name="args">The string arguments to parse.</param>
      <returns>A parse result describing the outcome of the parse operation.</returns>
    </member>
    <member name="T:System.CommandLine.CommandLineConfiguration">
      <summary>Represents the configuration used by the <see cref="T:System.CommandLine.Parsing.Parser" />.</summary>
    </member>
    <member name="M:System.CommandLine.CommandLineConfiguration.#ctor(System.CommandLine.Command,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.CommandLine.LocalizationResources,System.Collections.Generic.IReadOnlyList{System.CommandLine.Invocation.InvocationMiddleware},System.Func{System.CommandLine.Binding.BindingContext,System.CommandLine.Help.HelpBuilder},System.CommandLine.Parsing.TryReplaceToken)">
      <summary>Initializes a new instance of the CommandLineConfiguration class.</summary>
      <param name="command">The root command for the parser.</param>
      <param name="enablePosixBundling">
        <see langword="true" /> to enable POSIX bundling; otherwise, <see langword="false" />.</param>
      <param name="enableDirectives">
        <see langword="true" /> to enable directive parsing; otherwise, <see langword="false" />.</param>
      <param name="enableLegacyDoubleDashBehavior">Enables the legacy behavior of the <c>--</c> token, which is to ignore parsing of subsequent tokens and place them in the <see cref="P:System.CommandLine.Parsing.ParseResult.UnparsedTokens" /> list.</param>
      <param name="enableTokenReplacement">
        <see langword="true" /> to enable token replacement; otherwise, <see langword="false" />.</param>
      <param name="resources">Provide custom validation messages.</param>
      <param name="middlewarePipeline">Provide a custom middleware pipeline.</param>
      <param name="helpBuilderFactory">Provide a custom help builder.</param>
      <param name="tokenReplacer">Replaces the specified token with any number of other tokens.</param>
    </member>
    <member name="M:System.CommandLine.CommandLineConfiguration.ThrowIfInvalid">
      <summary>Throws an exception if the parser configuration is ambiguous or otherwise not valid.</summary>
      <exception cref="T:System.CommandLine.CommandLineConfigurationException">Thrown if the configuration is found to be invalid.</exception>
    </member>
    <member name="P:System.CommandLine.CommandLineConfiguration.EnableDirectives">
      <summary>Gets whether directives are enabled.</summary>
    </member>
    <member name="P:System.CommandLine.CommandLineConfiguration.EnableLegacyDoubleDashBehavior">
      <summary>Enables the legacy behavior of the <c>--</c> token, which is to ignore parsing of subsequent tokens and place them in the <see cref="P:System.CommandLine.Parsing.ParseResult.UnparsedTokens" /> list.</summary>
    </member>
    <member name="P:System.CommandLine.CommandLineConfiguration.EnablePosixBundling">
      <summary>Gets a value indicating whether POSIX bundling is enabled.</summary>
    </member>
    <member name="P:System.CommandLine.CommandLineConfiguration.EnableTokenReplacement">
      <summary>Gets a value indicating whether token replacement is enabled.</summary>
    </member>
    <member name="P:System.CommandLine.CommandLineConfiguration.LocalizationResources">
      <summary>Gets the localizable resources.</summary>
    </member>
    <member name="P:System.CommandLine.CommandLineConfiguration.RootCommand">
      <summary>Gets the root command.</summary>
    </member>
    <member name="T:System.CommandLine.CommandLineConfigurationException">
      <summary>Indicates that a command line configuration is invalid.</summary>
    </member>
    <member name="M:System.CommandLine.CommandLineConfigurationException.#ctor">
      <summary>Initializes a new instance of the <xref data-throw-if-not-resolved="true" uid="System.Exception"></xref> class.</summary>
    </member>
    <member name="M:System.CommandLine.CommandLineConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <xref data-throw-if-not-resolved="true" uid="System.Exception"></xref> class with serialized data.</summary>
      <param name="info">The <xref data-throw-if-not-resolved="true" uid="System.Runtime.Serialization.SerializationInfo"></xref> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <xref data-throw-if-not-resolved="true" uid="System.Runtime.Serialization.StreamingContext"></xref> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.CommandLine.CommandLineConfigurationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <xref data-throw-if-not-resolved="true" uid="System.Exception"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<code data-dev-comment-type="langword">Nothing</code> in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.CommandLine.CommandLineConfigurationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <xref data-throw-if-not-resolved="true" uid="System.Exception"></xref> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="T:System.CommandLine.Completions.CompletionContext">
      <summary>Supports command line completion operations.</summary>
    </member>
    <member name="M:System.CommandLine.Completions.CompletionContext.GetWordToComplete(System.CommandLine.Parsing.ParseResult,System.Nullable{System.Int32})">
      <summary>Gets the text to be matched for completion, which can be used to filter a list of completions.</summary>
      <param name="parseResult">A parse result.</param>
      <param name="position">The position within the raw input, if available, at which to provide completions.</param>
      <returns>A string containing the user-entered text to be matched for completions.</returns>
    </member>
    <member name="P:System.CommandLine.Completions.CompletionContext.ParseResult" />
    <member name="P:System.CommandLine.Completions.CompletionContext.WordToComplete" />
    <member name="T:System.CommandLine.Completions.CompletionDelegate">
      <summary>Provides command line completion.</summary>
      <param name="context" />
      <returns>A list of completions.</returns>
    </member>
    <member name="T:System.CommandLine.Completions.CompletionItem">
      <summary>Provides details about a command line completion item.</summary>
    </member>
    <member name="M:System.CommandLine.Completions.CompletionItem.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
      <param name="label">The label value, which is the text displayed to users and, unless <paramref name="insertText" /> is set, is also used to populate the <see cref="P:System.CommandLine.Completions.CompletionItem.InsertText" /> property.</param>
      <param name="kind">The kind of completion item.</param>
      <param name="sortText">The value used to sort the completion item in a list. If this is not provided, then <paramref name="label" />  is used.</param>
      <param name="insertText">The text to be inserted by this completion item. If this is not provided, then <paramref name="label" />  is used.</param>
      <param name="documentation">Documentation about the completion item.</param>
      <param name="detail">Additional details regarding the completion item.</param>
    </member>
    <member name="M:System.CommandLine.Completions.CompletionItem.Equals(System.CommandLine.Completions.CompletionItem)">
      <summary>Determines whether two completion items are equal.</summary>
      <param name="other" />
    </member>
    <member name="M:System.CommandLine.Completions.CompletionItem.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <code data-dev-comment-type="langword">true</code> if the specified object  is equal to the current object; otherwise, <code data-dev-comment-type="langword">false</code>.</returns>
    </member>
    <member name="M:System.CommandLine.Completions.CompletionItem.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:System.CommandLine.Completions.CompletionItem.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:System.CommandLine.Completions.CompletionItem.Detail">
      <summary>Additional details regarding the completion item.</summary>
    </member>
    <member name="P:System.CommandLine.Completions.CompletionItem.Documentation">
      <summary>Documentation about the completion item.</summary>
    </member>
    <member name="P:System.CommandLine.Completions.CompletionItem.InsertText">
      <summary>The text to be inserted by this completion item.</summary>
    </member>
    <member name="P:System.CommandLine.Completions.CompletionItem.Kind">
      <summary>The kind of completion item.</summary>
    </member>
    <member name="P:System.CommandLine.Completions.CompletionItem.Label">
      <summary>The label value, which is the text displayed to users.</summary>
    </member>
    <member name="P:System.CommandLine.Completions.CompletionItem.SortText">
      <summary>The value used to sort the completion item in a list.</summary>
    </member>
    <member name="T:System.CommandLine.Completions.ICompletionSource">
      <summary>Provides completions and example values for help.</summary>
    </member>
    <member name="M:System.CommandLine.Completions.ICompletionSource.GetCompletions(System.CommandLine.Completions.CompletionContext)">
      <summary>Gets the suggested values for command line completion.</summary>
      <param name="context" />
    </member>
    <member name="T:System.CommandLine.Completions.TextCompletionContext">
      <summary>Provides details for calculating completions in the context of complete, unsplit command line text.</summary>
    </member>
    <member name="M:System.CommandLine.Completions.TextCompletionContext.AtCursorPosition(System.Int32)">
      <summary>Creates a new instance of <see cref="T:System.CommandLine.Completions.TextCompletionContext" /> at the specified cursor position.</summary>
      <param name="position">The cursor position at which completions are calculated.</param>
    </member>
    <member name="P:System.CommandLine.Completions.TextCompletionContext.CommandLineText">
      <summary>The complete text of the command line prior to splitting, including any additional whitespace.</summary>
    </member>
    <member name="P:System.CommandLine.Completions.TextCompletionContext.CursorPosition">
      <summary>The position of the cursor within the command line.</summary>
    </member>
    <member name="T:System.CommandLine.Completions.TokenCompletionContext">
      <summary>Provides details for getting completions when the complete text of the original command line is not available.</summary>
    </member>
    <member name="T:System.CommandLine.CompletionSourceExtensions">
      <summary>Provides extension methods for working with completion sources.</summary>
    </member>
    <member name="M:System.CommandLine.CompletionSourceExtensions.Add(System.CommandLine.CompletionSourceList,System.CommandLine.Completions.CompletionDelegate)">
      <summary>Adds a completion source using a delegate.</summary>
      <param name="completionSources">The list of completion sources to add to.</param>
      <param name="complete">The delegate to be called when calculating completions.</param>
    </member>
    <member name="M:System.CommandLine.CompletionSourceExtensions.Add(System.CommandLine.CompletionSourceList,System.Func{System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable{System.String}})">
      <summary>Adds a completion source using a delegate.</summary>
      <param name="completionSources">The list of completion sources to add to.</param>
      <param name="complete">The delegate to be called when calculating completions.</param>
    </member>
    <member name="M:System.CommandLine.CompletionSourceExtensions.Add(System.CommandLine.CompletionSourceList,System.String[])">
      <summary>Adds a completion source using a delegate.</summary>
      <param name="completionSources">The list of completion sources to add to.</param>
      <param name="completions">A list of strings to be suggested for command line completions.</param>
    </member>
    <member name="T:System.CommandLine.CompletionSourceList">
      <summary>A list of completion sources to be used when providing completions for completion.</summary>
    </member>
    <member name="M:System.CommandLine.CompletionSourceList.#ctor" />
    <member name="M:System.CommandLine.CompletionSourceList.Add(System.CommandLine.Completions.ICompletionSource)">
      <summary>Adds a completion source to the list.</summary>
      <param name="source">The source to add.</param>
    </member>
    <member name="M:System.CommandLine.CompletionSourceList.Clear">
      <summary>Clears the completion sources.</summary>
    </member>
    <member name="M:System.CommandLine.CompletionSourceList.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.CommandLine.CompletionSourceList.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.CommandLine.CompletionSourceList.Count">
      <summary>Gets the number of elements in the collection.</summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="P:System.CommandLine.CompletionSourceList.Item(System.Int32)">
      <summary>Gets the element at the specified index in the read-only list.</summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>The element at the specified index in the read-only list.</returns>
    </member>
    <member name="T:System.CommandLine.ConsoleExtensions">
      <summary>Provides extension methods for <see cref="T:System.CommandLine.IConsole" />.</summary>
    </member>
    <member name="M:System.CommandLine.ConsoleExtensions.Write(System.CommandLine.IConsole,System.String)">
      <summary>Writes the current string value to the standard output stream.</summary>
      <param name="console">The console to write to.</param>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:System.CommandLine.ConsoleExtensions.WriteLine(System.CommandLine.IConsole,System.String)">
      <summary>Writes the current string value, followed by the current environment's line terminator, to the standard output stream.</summary>
      <param name="console">The console to write to.</param>
      <param name="value">The value to write.</param>
    </member>
    <member name="T:System.CommandLine.DirectiveCollection">
      <summary>A collection of directives parsed from a command line.</summary>
    </member>
    <member name="M:System.CommandLine.DirectiveCollection.#ctor" />
    <member name="M:System.CommandLine.DirectiveCollection.Contains(System.String)">
      <summary>Gets a value determining whether a directive with the specified name was parsed.</summary>
      <param name="name">The name of the directive.</param>
      <returns>
        <see langword="true" /> if a directive with the specified name was parsed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CommandLine.DirectiveCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.CommandLine.DirectiveCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.CommandLine.DirectiveCollection.TryGetValues(System.String,System.Collections.Generic.IReadOnlyList{System.String}@)">
      <summary>Gets the values specified for a given directive. A return value indicates whether the specified directive name was present.</summary>
      <param name="name">The name of the directive.</param>
      <param name="values">The values provided for the specified directive.</param>
      <returns>
        <see langword="true" /> if a directive with the specified name was parsed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.CommandLine.Handler">
      <summary>Provides methods for creating and working with command handlers.</summary>
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler(System.CommandLine.Command,System.Action)">
      <summary>Sets a command's handler based on an <see cref="T:System.Action" />.</summary>
      <param name="command" />
      <param name="handle" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler(System.CommandLine.Command,System.Action{System.CommandLine.Invocation.InvocationContext})">
      <summary>Sets a command's handler based on an <see cref="T:System.Action`1" />.</summary>
      <param name="command" />
      <param name="handle" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler(System.CommandLine.Command,System.Func{System.CommandLine.Invocation.InvocationContext,System.Threading.Tasks.Task})">
      <summary>Sets a command's handler based on a <see cref="T:System.Func`2" />.</summary>
      <param name="command" />
      <param name="handle" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler(System.CommandLine.Command,System.Func{System.Threading.Tasks.Task})">
      <summary>Sets a command's handler based on a <see cref="T:System.Func`1" />.</summary>
      <param name="command" />
      <param name="handle" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``1(System.CommandLine.Command,System.Action{``0},System.CommandLine.Binding.IValueDescriptor{``0})">
      <summary>Sets a command's handler based on an <see cref="T:System.Action`1" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol" />
      <typeparam name="T" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``1(System.CommandLine.Command,System.Func{``0,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0})">
      <summary>Sets a command's handler based on a <see cref="T:System.Func`2" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol" />
      <typeparam name="T" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``2(System.CommandLine.Command,System.Action{``0,``1},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1})">
      <summary>Sets a command's handler based on an <see cref="T:System.Action`2" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol1" />
      <param name="symbol2" />
      <typeparam name="T1" />
      <typeparam name="T2" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``2(System.CommandLine.Command,System.Func{``0,``1,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1})">
      <summary>Sets a command's handler based on a <see cref="T:System.Func`3" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol1" />
      <param name="symbol2" />
      <typeparam name="T1" />
      <typeparam name="T2" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``3(System.CommandLine.Command,System.Action{``0,``1,``2},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2})">
      <summary>Sets a command's handler based on an <see cref="T:System.Action`3" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol1" />
      <param name="symbol2" />
      <param name="symbol3" />
      <typeparam name="T1" />
      <typeparam name="T2" />
      <typeparam name="T3" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``3(System.CommandLine.Command,System.Func{``0,``1,``2,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2})">
      <summary>Sets a command's handler based on a <see cref="T:System.Func`4" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol1" />
      <param name="symbol2" />
      <param name="symbol3" />
      <typeparam name="T1" />
      <typeparam name="T2" />
      <typeparam name="T3" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``4(System.CommandLine.Command,System.Action{``0,``1,``2,``3},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3})">
      <summary>Sets a command's handler based on an <see cref="T:System.Action`4" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol1" />
      <param name="symbol2" />
      <param name="symbol3" />
      <param name="symbol4" />
      <typeparam name="T1" />
      <typeparam name="T2" />
      <typeparam name="T3" />
      <typeparam name="T4" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``4(System.CommandLine.Command,System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3})">
      <summary>Sets a command's handler based on a <see cref="T:System.Func`5" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol1" />
      <param name="symbol2" />
      <param name="symbol3" />
      <param name="symbol4" />
      <typeparam name="T1" />
      <typeparam name="T2" />
      <typeparam name="T3" />
      <typeparam name="T4" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``5(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4})">
      <summary>Sets a command's handler based on an <see cref="T:System.Action`5" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol1" />
      <param name="symbol2" />
      <param name="symbol3" />
      <param name="symbol4" />
      <param name="symbol5" />
      <typeparam name="T1" />
      <typeparam name="T2" />
      <typeparam name="T3" />
      <typeparam name="T4" />
      <typeparam name="T5" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``5(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4})">
      <summary>Sets a command's handler based on a <see cref="T:System.Func`6" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol1" />
      <param name="symbol2" />
      <param name="symbol3" />
      <param name="symbol4" />
      <param name="symbol5" />
      <typeparam name="T1" />
      <typeparam name="T2" />
      <typeparam name="T3" />
      <typeparam name="T4" />
      <typeparam name="T5" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``6(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4},System.CommandLine.Binding.IValueDescriptor{``5})">
      <summary>Sets a command's handler based on an <see cref="T:System.Action`6" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol1" />
      <param name="symbol2" />
      <param name="symbol3" />
      <param name="symbol4" />
      <param name="symbol5" />
      <param name="symbol6" />
      <typeparam name="T1" />
      <typeparam name="T2" />
      <typeparam name="T3" />
      <typeparam name="T4" />
      <typeparam name="T5" />
      <typeparam name="T6" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``6(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4},System.CommandLine.Binding.IValueDescriptor{``5})">
      <summary>Sets a command's handler based on a <see cref="T:System.Func`7" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol1" />
      <param name="symbol2" />
      <param name="symbol3" />
      <param name="symbol4" />
      <param name="symbol5" />
      <param name="symbol6" />
      <typeparam name="T1" />
      <typeparam name="T2" />
      <typeparam name="T3" />
      <typeparam name="T4" />
      <typeparam name="T5" />
      <typeparam name="T6" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``7(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5,``6},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4},System.CommandLine.Binding.IValueDescriptor{``5},System.CommandLine.Binding.IValueDescriptor{``6})">
      <summary>Sets a command's handler based on an <see cref="T:System.Action`7" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol1" />
      <param name="symbol2" />
      <param name="symbol3" />
      <param name="symbol4" />
      <param name="symbol5" />
      <param name="symbol6" />
      <param name="symbol7" />
      <typeparam name="T1" />
      <typeparam name="T2" />
      <typeparam name="T3" />
      <typeparam name="T4" />
      <typeparam name="T5" />
      <typeparam name="T6" />
      <typeparam name="T7" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``7(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,``6,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4},System.CommandLine.Binding.IValueDescriptor{``5},System.CommandLine.Binding.IValueDescriptor{``6})">
      <summary>Sets a command's handler based on a <see cref="T:System.Func`8" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol1" />
      <param name="symbol2" />
      <param name="symbol3" />
      <param name="symbol4" />
      <param name="symbol5" />
      <param name="symbol6" />
      <param name="symbol7" />
      <typeparam name="T1" />
      <typeparam name="T2" />
      <typeparam name="T3" />
      <typeparam name="T4" />
      <typeparam name="T5" />
      <typeparam name="T6" />
      <typeparam name="T7" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``8(System.CommandLine.Command,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4},System.CommandLine.Binding.IValueDescriptor{``5},System.CommandLine.Binding.IValueDescriptor{``6},System.CommandLine.Binding.IValueDescriptor{``7})">
      <summary>Sets a command's handler based on an <see cref="T:System.Action`8" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol1" />
      <param name="symbol2" />
      <param name="symbol3" />
      <param name="symbol4" />
      <param name="symbol5" />
      <param name="symbol6" />
      <param name="symbol7" />
      <param name="symbol8" />
      <typeparam name="T1" />
      <typeparam name="T2" />
      <typeparam name="T3" />
      <typeparam name="T4" />
      <typeparam name="T5" />
      <typeparam name="T6" />
      <typeparam name="T7" />
      <typeparam name="T8" />
    </member>
    <member name="M:System.CommandLine.Handler.SetHandler``8(System.CommandLine.Command,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Threading.Tasks.Task},System.CommandLine.Binding.IValueDescriptor{``0},System.CommandLine.Binding.IValueDescriptor{``1},System.CommandLine.Binding.IValueDescriptor{``2},System.CommandLine.Binding.IValueDescriptor{``3},System.CommandLine.Binding.IValueDescriptor{``4},System.CommandLine.Binding.IValueDescriptor{``5},System.CommandLine.Binding.IValueDescriptor{``6},System.CommandLine.Binding.IValueDescriptor{``7})">
      <summary>Sets a command's handler based on a <see cref="T:System.Func`9" />.</summary>
      <param name="command" />
      <param name="handle" />
      <param name="symbol1" />
      <param name="symbol2" />
      <param name="symbol3" />
      <param name="symbol4" />
      <param name="symbol5" />
      <param name="symbol6" />
      <param name="symbol7" />
      <param name="symbol8" />
      <typeparam name="T1" />
      <typeparam name="T2" />
      <typeparam name="T3" />
      <typeparam name="T4" />
      <typeparam name="T5" />
      <typeparam name="T6" />
      <typeparam name="T7" />
      <typeparam name="T8" />
    </member>
    <member name="T:System.CommandLine.Help.HelpBuilder">
      <summary>Formats output to be shown to users to describe how to use a command line tool.</summary>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.#ctor(System.CommandLine.LocalizationResources,System.Int32)">
      <param name="localizationResources">Resources used to localize the help output.</param>
      <param name="maxWidth">The maximum width in characters after which help output is wrapped.</param>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.CustomizeLayout(System.Func{System.CommandLine.Help.HelpContext,System.Collections.Generic.IEnumerable{System.CommandLine.Help.HelpSectionDelegate}})">
      <summary>Customizes the help sections that will be displayed.</summary>
      <param name="getLayout">A delegate that returns the sections in the order in which they should be written.</param>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.CustomizeSymbol(System.CommandLine.Symbol,System.Func{System.CommandLine.Help.HelpContext,System.String},System.Func{System.CommandLine.Help.HelpContext,System.String},System.Func{System.CommandLine.Help.HelpContext,System.String})">
      <summary>Specifies custom help details for a specific symbol.</summary>
      <param name="symbol">The symbol to specify custom help details for.</param>
      <param name="firstColumnText">A delegate to display the first help column (typically name and usage information).</param>
      <param name="secondColumnText">A delegate to display second help column (typically the description).</param>
      <param name="defaultValue">A delegate to display the default value for the symbol.</param>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.GetTwoColumnRow(System.CommandLine.Symbol,System.CommandLine.Help.HelpContext)">
      <summary>Gets a help item for the specified symbol.</summary>
      <param name="symbol">The symbol to get a help item for.</param>
      <param name="context">The help context.</param>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.Write(System.CommandLine.Help.HelpContext)">
      <summary>Writes help output for the specified command.</summary>
      <param name="context" />
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.WriteColumns(System.Collections.Generic.IReadOnlyList{System.CommandLine.Help.TwoColumnHelpRow},System.CommandLine.Help.HelpContext)">
      <summary>Writes the specified help rows, aligning output in columns.</summary>
      <param name="items">The help items to write out in columns.</param>
      <param name="context">The help context.</param>
    </member>
    <member name="P:System.CommandLine.Help.HelpBuilder.LocalizationResources">
      <summary>Provides localizable strings for help and error messages.</summary>
    </member>
    <member name="P:System.CommandLine.Help.HelpBuilder.MaxWidth">
      <summary>The maximum width for which to format help output.</summary>
    </member>
    <member name="T:System.CommandLine.Help.HelpBuilder.Default">
      <summary>Provides default formatting for help output.</summary>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.Default.AdditionalArgumentsSection">
      <summary>Writes a help section describing a command's additional arguments, typically shown only when <see cref="P:System.CommandLine.Command.TreatUnmatchedTokensAsErrors" /> is set to <see langword="true" />.</summary>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.Default.CommandArgumentsSection">
      <summary>Writes a help section describing a command's arguments.</summary>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.Default.CommandUsageSection">
      <summary>Writes a help section describing a command's usage.</summary>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.Default.GetArgumentDefaultValue(System.CommandLine.Argument)">
      <summary>Gets an argument's default value to be displayed in help.</summary>
      <param name="argument">The argument to get the default value for.</param>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.Default.GetArgumentDescription(System.CommandLine.Argument)">
      <summary>Gets the description for an argument (typically used in the second column text in the arguments section).</summary>
      <param name="argument" />
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.Default.GetArgumentUsageLabel(System.CommandLine.Argument)">
      <summary>Gets the usage title for an argument (for example: <c>&lt;value&gt;</c>, typically used in the first column text in the arguments usage section, or within the synopsis.</summary>
      <param name="argument" />
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.Default.GetIdentifierSymbolDescription(System.CommandLine.IdentifierSymbol)">
      <summary>Gets the description for the specified symbol (typically the used as the second column in help text).</summary>
      <param name="symbol">The symbol to get the description for.</param>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.Default.GetIdentifierSymbolUsageLabel(System.CommandLine.IdentifierSymbol,System.CommandLine.Help.HelpContext)">
      <summary>Gets the usage label for the specified symbol (typically used as the first column text in help output).</summary>
      <param name="symbol">The symbol to get a help item for.</param>
      <param name="context">The help context, used for localization purposes.</param>
      <returns>Text to display.</returns>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.Default.GetLayout">
      <summary>Gets the default sections to be written for command line help.</summary>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.Default.OptionsSection">
      <summary>Writes a help section describing a command's options.</summary>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.Default.SubcommandsSection">
      <summary>Writes a help section describing a command's subcommands.</summary>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilder.Default.SynopsisSection">
      <summary>Writes a help section describing a command's synopsis.</summary>
    </member>
    <member name="T:System.CommandLine.Help.HelpBuilderExtensions">
      <summary>Provides extension methods for the help builder.</summary>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilderExtensions.CustomizeSymbol(System.CommandLine.Help.HelpBuilder,System.CommandLine.Symbol,System.String,System.String,System.String)">
      <summary>Specifies custom help details for a specific symbol.</summary>
      <param name="builder">The help builder to write with.</param>
      <param name="symbol">The symbol to customize the help details for.</param>
      <param name="firstColumnText">A delegate to display the first help column (typically name and usage information).</param>
      <param name="secondColumnText">A delegate to display second help column (typically the description).</param>
      <param name="defaultValue">The displayed default value for the symbol.</param>
    </member>
    <member name="M:System.CommandLine.Help.HelpBuilderExtensions.Write(System.CommandLine.Help.HelpBuilder,System.CommandLine.Command,System.IO.TextWriter)">
      <summary>Writes help output for the specified command.</summary>
      <param name="helpBuilder" />
      <param name="command" />
      <param name="writer" />
    </member>
    <member name="T:System.CommandLine.Help.HelpContext">
      <summary>Supports formatting command line help.</summary>
    </member>
    <member name="M:System.CommandLine.Help.HelpContext.#ctor(System.CommandLine.Help.HelpBuilder,System.CommandLine.Command,System.IO.TextWriter,System.CommandLine.Parsing.ParseResult)">
      <param name="helpBuilder">The current help builder.</param>
      <param name="command">The command for which help is being formatted.</param>
      <param name="output">A text writer to write output to.</param>
      <param name="parseResult">The result of the current parse operation.</param>
    </member>
    <member name="P:System.CommandLine.Help.HelpContext.Command">
      <summary>The command for which help is being formatted.</summary>
    </member>
    <member name="P:System.CommandLine.Help.HelpContext.HelpBuilder">
      <summary>The help builder for the current operation.</summary>
    </member>
    <member name="P:System.CommandLine.Help.HelpContext.Output">
      <summary>A text writer to write output to.</summary>
    </member>
    <member name="P:System.CommandLine.Help.HelpContext.ParseResult">
      <summary>The result of the current parse operation.</summary>
    </member>
    <member name="T:System.CommandLine.Help.HelpSectionDelegate">
      <summary>Specifies help formatting behavior for a section of command line help.</summary>
      <param name="context" />
      <returns>
        <see langword="true" /> if anything was written; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.CommandLine.Help.TwoColumnHelpRow">
      <summary>Provides details about an item to be formatted to output in order to display two-column command line help.</summary>
    </member>
    <member name="M:System.CommandLine.Help.TwoColumnHelpRow.#ctor(System.String,System.String)">
      <param name="firstColumnText">The name and invocation details, typically displayed in the first help column.</param>
      <param name="secondColumnText">The description of a symbol, typically displayed in the second help column.</param>
    </member>
    <member name="M:System.CommandLine.Help.TwoColumnHelpRow.Equals(System.CommandLine.Help.TwoColumnHelpRow)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CommandLine.Help.TwoColumnHelpRow.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <code data-dev-comment-type="langword">true</code> if the specified object  is equal to the current object; otherwise, <code data-dev-comment-type="langword">false</code>.</returns>
    </member>
    <member name="M:System.CommandLine.Help.TwoColumnHelpRow.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="P:System.CommandLine.Help.TwoColumnHelpRow.FirstColumnText">
      <summary>The first column for a help entry, typically containing the name and other usage details about an option or argument.</summary>
    </member>
    <member name="P:System.CommandLine.Help.TwoColumnHelpRow.SecondColumnText">
      <summary>The second column for a help entry, typically containing the name and other usage details about an option or argument.</summary>
    </member>
    <member name="T:System.CommandLine.IConsole">
      <summary>Represents the standard console input, output, and error streams.</summary>
    </member>
    <member name="T:System.CommandLine.IdentifierSymbol">
      <summary>A symbol, such as an option or command, having one or more fixed names in a command line interface.</summary>
    </member>
    <member name="M:System.CommandLine.IdentifierSymbol.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CommandLine.IdentifierSymbol" /> class.</summary>
      <param name="name">The name of the symbol.</param>
      <param name="description">The description of the symbol, which is displayed in command line help.</param>
    </member>
    <member name="M:System.CommandLine.IdentifierSymbol.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CommandLine.IdentifierSymbol" /> class.</summary>
      <param name="description">The description of the symbol, which is displayed in command line help.</param>
    </member>
    <member name="M:System.CommandLine.IdentifierSymbol.AddAlias(System.String)">
      <summary>Adds an alias.</summary>
      <param name="alias">The alias to add.</param>
    </member>
    <member name="M:System.CommandLine.IdentifierSymbol.HasAlias(System.String)">
      <summary>Determines whether the specified alias has already been defined.</summary>
      <param name="alias">The alias to search for.</param>
      <returns>
        <see langword="true" /> if the alias has already been defined; otherwise <see langword="false" />.</returns>
    </member>
    <member name="P:System.CommandLine.IdentifierSymbol.Aliases">
      <summary>Gets the set of strings that can be used on the command line to specify the symbol.</summary>
    </member>
    <member name="P:System.CommandLine.IdentifierSymbol.Name">
      <summary>Gets or sets the symbol name.</summary>
    </member>
    <member name="T:System.CommandLine.Invocation.ICommandHandler">
      <summary>Defines the behavior of a command.</summary>
    </member>
    <member name="M:System.CommandLine.Invocation.ICommandHandler.Invoke(System.CommandLine.Invocation.InvocationContext)">
      <summary>Performs an action when the associated command is invoked on the command line.</summary>
      <param name="context">Provides context for the invocation, including parse results and binding support.</param>
      <returns>A value that can be used as the exit code for the process.</returns>
    </member>
    <member name="M:System.CommandLine.Invocation.ICommandHandler.InvokeAsync(System.CommandLine.Invocation.InvocationContext)">
      <summary>Performs an action when the associated command is invoked on the command line.</summary>
      <param name="context">Provides context for the invocation, including parse results and binding support.</param>
      <returns>A value that can be used as the exit code for the process.</returns>
    </member>
    <member name="T:System.CommandLine.Invocation.IInvocationResult">
      <summary>The result of a command handler invocation.</summary>
    </member>
    <member name="M:System.CommandLine.Invocation.IInvocationResult.Apply(System.CommandLine.Invocation.InvocationContext)">
      <summary>Applies the result to the current invocation context.</summary>
      <param name="context">The context for the current invocation.</param>
    </member>
    <member name="T:System.CommandLine.Invocation.InvocationContext">
      <summary>Supports command invocation by providing access to parse results and other services.</summary>
    </member>
    <member name="M:System.CommandLine.Invocation.InvocationContext.#ctor(System.CommandLine.Parsing.ParseResult,System.CommandLine.IConsole)">
      <param name="parseResult">The result of the current parse operation.</param>
      <param name="console">The console to which output is to be written.</param>
    </member>
    <member name="M:System.CommandLine.Invocation.InvocationContext.GetCancellationToken">
      <summary>Gets token to implement cancellation handling.</summary>
      <returns>Token used by the caller to implement cancellation handling.</returns>
    </member>
    <member name="P:System.CommandLine.Invocation.InvocationContext.BindingContext">
      <summary>The binding context for the current invocation.</summary>
    </member>
    <member name="P:System.CommandLine.Invocation.InvocationContext.Console">
      <summary>The console to which output should be written during the current invocation.</summary>
    </member>
    <member name="P:System.CommandLine.Invocation.InvocationContext.ExitCode">
      <summary>A value that can be used to set the exit code for the process.</summary>
    </member>
    <member name="P:System.CommandLine.Invocation.InvocationContext.HelpBuilder">
      <summary>Enables writing help output.</summary>
    </member>
    <member name="P:System.CommandLine.Invocation.InvocationContext.InvocationResult">
      <summary>The result of the current invocation.</summary>
    </member>
    <member name="P:System.CommandLine.Invocation.InvocationContext.LocalizationResources">
      <summary>Provides localizable strings for help and error messages.</summary>
    </member>
    <member name="P:System.CommandLine.Invocation.InvocationContext.Parser">
      <summary>The parser used to create the <see cref="P:System.CommandLine.Invocation.InvocationContext.ParseResult" />.</summary>
    </member>
    <member name="P:System.CommandLine.Invocation.InvocationContext.ParseResult">
      <summary>The parse result for the current invocation.</summary>
    </member>
    <member name="T:System.CommandLine.Invocation.InvocationMiddleware">
      <summary>A delegate used for adding command handler invocation middleware.</summary>
      <param name="context">The context for the current invocation, which will be passed to each middleware and then to the command handler, unless a middleware short circuits it.</param>
      <param name="next">A continuation. Passing the incoming <see cref="T:System.CommandLine.Invocation.InvocationContext" /> to it will execute the next middleware in the pipeline and, at the end of the pipeline, the command handler. Middleware can short circuit the invocation by not calling this continuation.</param>
    </member>
    <member name="T:System.CommandLine.Invocation.MiddlewareOrder">
      <summary>Designates ordering of middleware in the invocation pipeline.</summary>
    </member>
    <member name="F:System.CommandLine.Invocation.MiddlewareOrder.Configuration">
      <summary>The position in the pipeline at which configuration middleware is invoked.</summary>
    </member>
    <member name="F:System.CommandLine.Invocation.MiddlewareOrder.Default">
      <summary>The default position in the pipeline.</summary>
    </member>
    <member name="F:System.CommandLine.Invocation.MiddlewareOrder.ErrorReporting">
      <summary>The position in the pipeline at which error reporting middleware is invoked.</summary>
    </member>
    <member name="F:System.CommandLine.Invocation.MiddlewareOrder.ExceptionHandler">
      <summary>The position in the pipeline at which the exception handler middleware is invoked.</summary>
    </member>
    <member name="T:System.CommandLine.IO.IStandardError">
      <summary>Represents a console's standard error stream.</summary>
    </member>
    <member name="P:System.CommandLine.IO.IStandardError.Error">
      <summary>The stream writer for standard error.</summary>
    </member>
    <member name="P:System.CommandLine.IO.IStandardError.IsErrorRedirected">
      <summary>Indicates whether the standard error stream has been redirected.</summary>
    </member>
    <member name="T:System.CommandLine.IO.IStandardIn">
      <summary>Represents a console's standard input stream.</summary>
    </member>
    <member name="P:System.CommandLine.IO.IStandardIn.IsInputRedirected">
      <summary>Gets a value indicating whether input is redirected.</summary>
    </member>
    <member name="T:System.CommandLine.IO.IStandardOut">
      <summary>Represents a console's standard output stream.</summary>
    </member>
    <member name="P:System.CommandLine.IO.IStandardOut.IsOutputRedirected">
      <summary>Indicates whether the standard output stream has been redirected.</summary>
    </member>
    <member name="P:System.CommandLine.IO.IStandardOut.Out">
      <summary>The stream writer for standard output.</summary>
    </member>
    <member name="T:System.CommandLine.IO.IStandardStreamWriter">
      <summary>Represents a standard stream that can be written to.</summary>
    </member>
    <member name="M:System.CommandLine.IO.IStandardStreamWriter.Write(System.String)">
      <summary>Writes the specified string to the stream.</summary>
      <param name="value">The value to write.</param>
    </member>
    <member name="T:System.CommandLine.IO.StandardStreamWriter">
      <summary>Provides methods for working with standard streams.</summary>
    </member>
    <member name="M:System.CommandLine.IO.StandardStreamWriter.Create(System.IO.TextWriter)">
      <summary>Creates a <see cref="T:System.CommandLine.IO.IStandardStreamWriter" /> that writes to the specified <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="writer" />
    </member>
    <member name="M:System.CommandLine.IO.StandardStreamWriter.CreateTextWriter(System.CommandLine.IO.IStandardStreamWriter)">
      <summary>Creates a <see cref="T:System.IO.TextWriter" /> that writes to the specified <see cref="T:System.CommandLine.IO.IStandardStreamWriter" />.</summary>
      <param name="writer" />
    </member>
    <member name="M:System.CommandLine.IO.StandardStreamWriter.WriteLine(System.CommandLine.IO.IStandardStreamWriter,System.String)">
      <summary>Writes the current string value, followed by the current environment's line terminator.</summary>
      <param name="writer">The writer to write to.</param>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:System.CommandLine.IO.StandardStreamWriter.WriteLine(System.CommandLine.IO.IStandardStreamWriter)">
      <summary>Appends the current environment's line terminator.</summary>
      <param name="writer">The writer to write to.</param>
    </member>
    <member name="T:System.CommandLine.IO.SystemConsole">
      <summary>Provides access to the standard streams via <see cref="T:System.Console" />.</summary>
    </member>
    <member name="M:System.CommandLine.IO.SystemConsole.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.CommandLine.IO.SystemConsole" />.</summary>
    </member>
    <member name="P:System.CommandLine.IO.SystemConsole.Error">
      <summary>Gets the stream writer for standard error.</summary>
    </member>
    <member name="P:System.CommandLine.IO.SystemConsole.IsErrorRedirected">
      <summary>Gets a value that specifies whether the standard error stream has been redirected.</summary>
    </member>
    <member name="P:System.CommandLine.IO.SystemConsole.IsInputRedirected">
      <summary>Gets a value indicating whether input is redirected.</summary>
    </member>
    <member name="P:System.CommandLine.IO.SystemConsole.IsOutputRedirected">
      <summary>Gets a value that specifies whether the standard output stream has been redirected.</summary>
    </member>
    <member name="P:System.CommandLine.IO.SystemConsole.Out">
      <summary>Gets the stream writer for standard output.</summary>
    </member>
    <member name="T:System.CommandLine.IO.TestConsole">
      <summary>Provides access to in-memory standard streams that are not attached to <see cref="T:System.Console" />.</summary>
    </member>
    <member name="M:System.CommandLine.IO.TestConsole.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.CommandLine.IO.TestConsole" />.</summary>
    </member>
    <member name="P:System.CommandLine.IO.TestConsole.Error">
      <summary>The stream writer for standard error.</summary>
    </member>
    <member name="P:System.CommandLine.IO.TestConsole.IsErrorRedirected">
      <summary>Indicates whether the standard error stream has been redirected.</summary>
    </member>
    <member name="P:System.CommandLine.IO.TestConsole.IsInputRedirected">
      <summary>Gets a value indicating whether input is redirected.</summary>
    </member>
    <member name="P:System.CommandLine.IO.TestConsole.IsOutputRedirected">
      <summary>Indicates whether the standard output stream has been redirected.</summary>
    </member>
    <member name="P:System.CommandLine.IO.TestConsole.Out">
      <summary>The stream writer for standard output.</summary>
    </member>
    <member name="T:System.CommandLine.LocalizationResources">
      <summary>Provides localizable strings for help and error messages.</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CommandLine.LocalizationResources" /> class.</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.ArgumentConversionCannotParse(System.String,System.Type)">
      <summary>Interpolates values into a localized string similar to Cannot parse argument '{0}' as expected type {1}..</summary>
      <param name="value" />
      <param name="expectedType" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.ArgumentConversionCannotParseForCommand(System.String,System.String,System.Type)">
      <summary>Interpolates values into a localized string similar to Cannot parse argument '{0}' for command '{1}' as expected type {2}..</summary>
      <param name="value" />
      <param name="commandAlias" />
      <param name="expectedType" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.ArgumentConversionCannotParseForOption(System.String,System.String,System.Type)">
      <summary>Interpolates values into a localized string similar to Cannot parse argument '{0}' for option '{1}' as expected type {2}..</summary>
      <param name="value" />
      <param name="optionAlias" />
      <param name="expectedType" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.DirectoryDoesNotExist(System.String)">
      <summary>Interpolates values into a localized string similar to Directory does not exist: {0}.</summary>
      <param name="path" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.ErrorReadingResponseFile(System.String,System.IO.IOException)">
      <summary>Interpolates values into a localized string similar to Error reading response file '{0}': {1}.</summary>
      <param name="filePath" />
      <param name="e" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.ExceptionHandlerHeader">
      <summary>Interpolates values into a localized string similar to Unhandled exception: .</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.ExpectsFewerArguments(System.CommandLine.Parsing.Token,System.Int32,System.Int32)">
      <summary>Interpolates values into a localized string similar to Command '{0}' expects no more than {1} arguments, but {2} were provided.</summary>
      <param name="token" />
      <param name="providedNumberOfValues" />
      <param name="maximumNumberOfValues" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.ExpectsOneArgument(System.CommandLine.Parsing.SymbolResult)">
      <summary>Interpolates values into a localized string similar to Command '{0}' expects a single argument but {1} were provided.</summary>
      <param name="symbolResult" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.FileDoesNotExist(System.String)">
      <summary>Interpolates values into a localized string similar to File does not exist: {0}.</summary>
      <param name="filePath" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.FileOrDirectoryDoesNotExist(System.String)">
      <summary>Interpolates values into a localized string similar to File or directory does not exist: {0}.</summary>
      <param name="path" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.GetResourceString(System.String,System.Object[])">
      <summary>Interpolates values into a localized string.</summary>
      <param name="resourceString">The string template into which values will be interpolated.</param>
      <param name="formatArguments">The values to interpolate.</param>
      <returns>The final string after interpolation.</returns>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.HelpAdditionalArgumentsDescription">
      <summary>Interpolates values into a localized string similar to Arguments passed to the application that is being run..</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.HelpAdditionalArgumentsTitle">
      <summary>Interpolates values into a localized string similar to Additional Arguments:.</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.HelpArgumentDefaultValueLabel">
      <summary>Interpolates values into a localized string similar to default.</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.HelpArgumentsTitle">
      <summary>Interpolates values into a localized string similar to Arguments:.</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.HelpCommandsTitle">
      <summary>Interpolates values into a localized string similar to Commands:.</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.HelpDescriptionTitle">
      <summary>Interpolates values into a localized string similar to Description:.</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.HelpOptionDescription">
      <summary>Interpolates values into a localized string similar to Show help and usage information.</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.HelpOptionsRequiredLabel">
      <summary>Interpolates values into a localized string similar to (REQUIRED).</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.HelpOptionsTitle">
      <summary>Interpolates values into a localized string similar to Options:.</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.HelpUsageAdditionalArguments">
      <summary>Interpolates values into a localized string similar to [[--] &lt;additional arguments&gt;...]].</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.HelpUsageCommand">
      <summary>Interpolates values into a localized string similar to [command].</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.HelpUsageOptions">
      <summary>Interpolates values into a localized string similar to [options].</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.HelpUsageTitle">
      <summary>Interpolates values into a localized string similar to Usage:.</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.InvalidCharactersInFileName(System.Char)">
      <summary>Interpolates values into a localized string similar to Character not allowed in a file name: {0}.</summary>
      <param name="invalidChar" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.InvalidCharactersInPath(System.Char)">
      <summary>Interpolates values into a localized string similar to Character not allowed in a path: {0}.</summary>
      <param name="invalidChar" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.NoArgumentProvided(System.CommandLine.Parsing.SymbolResult)">
      <summary>Interpolates values into a localized string similar to No argument was provided for Command '{0}'..</summary>
      <param name="symbolResult" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.RequiredArgumentMissing(System.CommandLine.Parsing.SymbolResult)">
      <summary>Interpolates values into a localized string similar to Required argument missing for command: {0}.</summary>
      <param name="symbolResult" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.RequiredCommandWasNotProvided">
      <summary>Interpolates values into a localized string similar to Required command was not provided.</summary>
    </member>
    <member name="M:System.CommandLine.LocalizationResources.ResponseFileNotFound(System.String)">
      <summary>Interpolates values into a localized string similar to Response file not found '{0}'.</summary>
      <param name="filePath" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.SuggestionsTokenNotMatched(System.String)">
      <summary>Interpolates values into a localized string similar to '{0}' was not matched. Did you mean one of the following?.</summary>
      <param name="token" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.UnrecognizedArgument(System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
      <summary>Interpolates values into a localized string similar to Argument '{0}' not recognized. Must be one of:{1}.</summary>
      <param name="unrecognizedArg" />
      <param name="allowedValues" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.UnrecognizedCommandOrArgument(System.String)">
      <summary>Interpolates values into a localized string similar to Unrecognized command or argument '{0}'.</summary>
      <param name="arg" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.VersionOptionCannotBeCombinedWithOtherArguments(System.String)">
      <summary>Interpolates values into a localized string similar to {0} option cannot be combined with other arguments..</summary>
      <param name="optionAlias" />
    </member>
    <member name="M:System.CommandLine.LocalizationResources.VersionOptionDescription">
      <summary>Interpolates values into a localized string similar to Show version information.</summary>
    </member>
    <member name="P:System.CommandLine.LocalizationResources.Instance">
      <summary>Gets a global instance of the <see cref="T:System.CommandLine.LocalizationResources" /> class.</summary>
    </member>
    <member name="T:System.CommandLine.Option">
      <summary>A symbol defining a named parameter and a value for that parameter.</summary>
    </member>
    <member name="M:System.CommandLine.Option.AddValidator(System.CommandLine.Parsing.ValidateSymbolResult{System.CommandLine.Parsing.OptionResult})">
      <summary>Adds a validator that will be called when the option is matched by the parser.</summary>
      <param name="validate">A <see cref="T:System.CommandLine.Parsing.ValidateSymbolResult`1" /> delegate used to validate the <see cref="T:System.CommandLine.Parsing.OptionResult" /> produced during parsing.</param>
    </member>
    <member name="M:System.CommandLine.Option.GetCompletions(System.CommandLine.Completions.CompletionContext)">
      <summary>Gets the suggested values for command line completion.</summary>
      <param name="context" />
      <returns>A list of completion items.</returns>
    </member>
    <member name="M:System.CommandLine.Option.HasAliasIgnoringPrefix(System.String)">
      <summary>Indicates whether a given alias exists on the option, regardless of its prefix.</summary>
      <param name="alias">The alias, which can include a prefix.</param>
      <returns>
        <see langword="true" /> if the alias exists; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CommandLine.Option.SetDefaultValue(System.Object)">
      <summary>Sets the default value for the option.</summary>
      <param name="value">The default value for the option.</param>
    </member>
    <member name="M:System.CommandLine.Option.SetDefaultValueFactory(System.Func{System.Object})">
      <summary>Sets a delegate to invoke when the default value for the option is required.</summary>
      <param name="getDefaultValue">The delegate to invoke to return the default value.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="getDefaultValue" /> is null.</exception>
    </member>
    <member name="M:System.CommandLine.Option.System#CommandLine#Binding#IValueDescriptor#GetDefaultValue">
      <summary>Gets the default value, if any.</summary>
    </member>
    <member name="P:System.CommandLine.Option.AllowMultipleArgumentsPerToken">
      <summary>Gets a value that indicates whether multiple argument tokens are allowed for each option identifier token.</summary>
    </member>
    <member name="P:System.CommandLine.Option.ArgumentHelpName">
      <summary>Gets or sets the name of the argument when displayed in help.</summary>
      <returns>The name of the argument when displayed in help.</returns>
    </member>
    <member name="P:System.CommandLine.Option.Arity">
      <summary>Gets or sets the arity of the option.</summary>
    </member>
    <member name="P:System.CommandLine.Option.IsRequired">
      <summary>Indicates whether the option is required when its parent command is invoked.</summary>
    </member>
    <member name="P:System.CommandLine.Option.Name">
      <summary>Gets or sets the symbol name.</summary>
    </member>
    <member name="P:System.CommandLine.Option.System#CommandLine#Binding#IValueDescriptor#HasDefaultValue">
      <summary>Gets a value that indicates whether there is a default value.</summary>
    </member>
    <member name="P:System.CommandLine.Option.System#CommandLine#Binding#IValueDescriptor#ValueName">
      <summary>Gets the name of the value.</summary>
    </member>
    <member name="P:System.CommandLine.Option.ValueType">
      <summary>The <see cref="T:System.Type" /> that the option's arguments are expected to be parsed as.</summary>
    </member>
    <member name="T:System.CommandLine.Option`1">
      <summary>A symbol defining a named parameter and a value for that parameter.</summary>
      <typeparam name="T">The <xref data-throw-if-not-resolved="true" uid="System.Type"></xref> that the option's arguments are expected to be parsed as.</typeparam>
    </member>
    <member name="M:System.CommandLine.Option`1.#ctor(System.String,System.CommandLine.Parsing.ParseArgument{`0},System.Boolean,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CommandLine.Option`1" /> class.</summary>
      <param name="name" />
      <param name="parseArgument" />
      <param name="isDefault" />
      <param name="description" />
    </member>
    <member name="M:System.CommandLine.Option`1.#ctor(System.String,System.Func{`0},System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CommandLine.Option`1" /> class.</summary>
      <param name="name" />
      <param name="getDefaultValue" />
      <param name="description" />
    </member>
    <member name="M:System.CommandLine.Option`1.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <xref data-throw-if-not-resolved="true" uid="System.CommandLine.IdentifierSymbol"></xref> class.</summary>
      <param name="name">The name of the symbol.</param>
      <param name="description">The description of the symbol, which is displayed in command line help.</param>
    </member>
    <member name="M:System.CommandLine.Option`1.#ctor(System.String[],System.CommandLine.Parsing.ParseArgument{`0},System.Boolean,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CommandLine.Option`1" /> class.</summary>
      <param name="aliases" />
      <param name="parseArgument" />
      <param name="isDefault" />
      <param name="description" />
    </member>
    <member name="M:System.CommandLine.Option`1.#ctor(System.String[],System.Func{`0},System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CommandLine.Option`1" /> class.</summary>
      <param name="aliases" />
      <param name="getDefaultValue" />
      <param name="description" />
    </member>
    <member name="M:System.CommandLine.Option`1.#ctor(System.String[],System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.CommandLine.Option`1" /> class.</summary>
      <param name="aliases" />
      <param name="description" />
    </member>
    <member name="P:System.CommandLine.Option`1.Arity">
      <summary>Gets or sets the arity of the option.</summary>
    </member>
    <member name="T:System.CommandLine.OptionExtensions">
      <summary>Provides extension methods for <see cref="T:System.CommandLine.Option" />.</summary>
    </member>
    <member name="M:System.CommandLine.OptionExtensions.AddCompletions``1(``0,System.CommandLine.Completions.CompletionDelegate)">
      <summary>Adds completions for an option.</summary>
      <param name="option">The option for which to add completions.</param>
      <param name="complete">A <see cref="T:System.CommandLine.Completions.CompletionDelegate" /> that will be called to provide completions.</param>
      <typeparam name="TOption">The type of the option.</typeparam>
      <returns>The option being extended.</returns>
    </member>
    <member name="M:System.CommandLine.OptionExtensions.AddCompletions``1(``0,System.Func{System.CommandLine.Completions.CompletionContext,System.Collections.Generic.IEnumerable{System.String}})">
      <summary>Adds completions for an option.</summary>
      <param name="option">The option for which to add completions.</param>
      <param name="complete">A <see cref="T:System.CommandLine.Completions.CompletionDelegate" /> that will be called to provide completions.</param>
      <typeparam name="TOption">The type of the option.</typeparam>
      <returns>The option being extended.</returns>
    </member>
    <member name="M:System.CommandLine.OptionExtensions.AddCompletions``1(``0,System.String[])">
      <summary>Adds completions for an option.</summary>
      <param name="option">The option for which to add completions.</param>
      <param name="values">The completions to add.</param>
      <typeparam name="TOption">The type of the <see cref="T:System.CommandLine.Option" />.</typeparam>
      <returns>The option being extended.</returns>
    </member>
    <member name="M:System.CommandLine.OptionExtensions.ExistingOnly(System.CommandLine.Option{System.IO.DirectoryInfo})">
      <summary>Configures an option to accept only values corresponding to an existing directory.</summary>
      <param name="option">The option to configure.</param>
      <returns>The option being extended.</returns>
    </member>
    <member name="M:System.CommandLine.OptionExtensions.ExistingOnly(System.CommandLine.Option{System.IO.FileInfo})">
      <summary>Configures an option to accept only values corresponding to an existing file.</summary>
      <param name="option">The option to configure.</param>
      <returns>The option being extended.</returns>
    </member>
    <member name="M:System.CommandLine.OptionExtensions.ExistingOnly(System.CommandLine.Option{System.IO.FileSystemInfo})">
      <summary>Configures an option to accept only values corresponding to an existing file or directory.</summary>
      <param name="option">The option to configure.</param>
      <returns>The option being extended.</returns>
    </member>
    <member name="M:System.CommandLine.OptionExtensions.ExistingOnly``1(System.CommandLine.Option{``0})">
      <summary>Configures an option to accept only values corresponding to a existing files or directories.</summary>
      <param name="option">The option to configure.</param>
      <typeparam name="T" />
      <returns>The option being extended.</returns>
    </member>
    <member name="M:System.CommandLine.OptionExtensions.FromAmong``1(``0,System.String[])">
      <summary>Configures an option to accept only the specified values, and to suggest them as command line completions.</summary>
      <param name="option">The option to configure.</param>
      <param name="values">The values that are allowed for the option.</param>
      <typeparam name="TOption">The type of the option's parsed value.</typeparam>
      <returns>The configured argument.</returns>
    </member>
    <member name="M:System.CommandLine.OptionExtensions.LegalFileNamesOnly``1(``0)">
      <summary>Configures an option to accept only values representing legal file names.</summary>
      <param name="option">The option to configure.</param>
      <typeparam name="TOption" />
      <returns>The option being extended.</returns>
    </member>
    <member name="M:System.CommandLine.OptionExtensions.LegalFilePathsOnly``1(``0)">
      <summary>Configures an option to accept only values representing legal file paths.</summary>
      <param name="option">The option to configure.</param>
      <typeparam name="TOption" />
      <returns>The option being extended.</returns>
    </member>
    <member name="M:System.CommandLine.OptionExtensions.Parse(System.CommandLine.Option,System.String)">
      <summary>Parses a command line string value using an option.</summary>
      <param name="option">The option to use to parse the command line input.</param>
      <param name="commandLine">A command line string to parse, which can include spaces and quotes equivalent to what can be entered into a terminal.</param>
      <returns>A parse result describing the outcome of the parse operation.</returns>
    </member>
    <member name="M:System.CommandLine.OptionExtensions.Parse(System.CommandLine.Option,System.String[])">
      <summary>Parses a command line string value using an option.</summary>
      <param name="option">The option to use to parse the command line input.</param>
      <param name="args">The string options to parse.</param>
      <returns>A parse result describing the outcome of the parse operation.</returns>
    </member>
    <member name="T:System.CommandLine.Parsing.ArgumentResult">
      <summary>A result produced when parsing an <see cref="P:System.CommandLine.Parsing.ArgumentResult.Argument" />.</summary>
    </member>
    <member name="M:System.CommandLine.Parsing.ArgumentResult.GetValueOrDefault">
      <summary>Gets the parsed value or the default value for <xref data-throw-if-not-resolved="true" uid="System.CommandLine.Parsing.ArgumentResult.Argument"></xref>.</summary>
      <returns>The parsed value or the default value for <xref data-throw-if-not-resolved="true" uid="System.CommandLine.Parsing.ArgumentResult.Argument"></xref></returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ArgumentResult.GetValueOrDefault``1">
      <summary>Gets the parsed value or the default value for <see cref="P:System.CommandLine.Parsing.ArgumentResult.Argument" />.</summary>
      <typeparam name="T" />
      <returns>The parsed value or the default value for <see cref="P:System.CommandLine.Parsing.ArgumentResult.Argument" /></returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ArgumentResult.OnlyTake(System.Int32)">
      <summary>Specifies the maximum number of tokens to consume for the argument. Remaining tokens are passed on and can be consumed by later arguments, or will otherwise be added to <see cref="P:System.CommandLine.Parsing.ParseResult.UnmatchedTokens" /></summary>
      <param name="numberOfTokens">The number of tokens to take. The rest are passed on.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">numberOfTokens - Value must be at least 1.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if this method is called more than once.</exception>
    </member>
    <member name="M:System.CommandLine.Parsing.ArgumentResult.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:System.CommandLine.Parsing.ArgumentResult.Argument">
      <summary>The argument to which the result applies.</summary>
    </member>
    <member name="T:System.CommandLine.Parsing.CommandLineStringSplitter">
      <summary>Splits a string based on whitespace and quotation marks</summary>
    </member>
    <member name="F:System.CommandLine.Parsing.CommandLineStringSplitter.Instance">
      <summary>A single instance of <see cref="T:System.CommandLine.Parsing.CommandLineStringSplitter" /></summary>
    </member>
    <member name="M:System.CommandLine.Parsing.CommandLineStringSplitter.Split(System.String)">
      <summary>Splits a string into a sequence of strings based on whitespace and quotation marks.</summary>
      <param name="commandLine">A command line input string.</param>
      <returns>A sequence of strings.</returns>
    </member>
    <member name="T:System.CommandLine.Parsing.CommandResult">
      <summary>A result produced when parsing a <see cref="P:System.CommandLine.Parsing.CommandResult.Command" />.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.CommandResult.Command">
      <summary>The command to which the result applies.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.CommandResult.Token">
      <summary>The token that was parsed to specify the command.</summary>
    </member>
    <member name="T:System.CommandLine.Parsing.OptionResult">
      <summary>A result produced when parsing an <see cref="P:System.CommandLine.Parsing.OptionResult.Option" />.</summary>
    </member>
    <member name="M:System.CommandLine.Parsing.OptionResult.GetValueOrDefault">
      <summary>Gets the parsed value or the default value for <xref data-throw-if-not-resolved="true" uid="System.CommandLine.Parsing.OptionResult.Option"></xref>.</summary>
      <returns>The parsed value or the default value for <xref data-throw-if-not-resolved="true" uid="System.CommandLine.Parsing.OptionResult.Option"></xref></returns>
    </member>
    <member name="M:System.CommandLine.Parsing.OptionResult.GetValueOrDefault``1">
      <summary>Gets the parsed value or the default value for <see cref="P:System.CommandLine.Parsing.OptionResult.Option" />.</summary>
      <typeparam name="T" />
      <returns>The parsed value or the default value for <see cref="P:System.CommandLine.Parsing.OptionResult.Option" /></returns>
    </member>
    <member name="P:System.CommandLine.Parsing.OptionResult.IsImplicit">
      <summary>Indicates whether the result was created implicitly and not due to the option being specified on the command line.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.OptionResult.Option">
      <summary>The option to which the result applies.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.OptionResult.Token">
      <summary>The token that was parsed to specify the option.</summary>
    </member>
    <member name="T:System.CommandLine.Parsing.ParseArgument`1">
      <summary>Performs custom parsing of an argument.</summary>
      <param name="result">The argument result.</param>
      <typeparam name="T">The type which the argument is to be parsed as.</typeparam>
      <returns>The parsed value.</returns>
    </member>
    <member name="T:System.CommandLine.Parsing.ParseError">
      <summary>Describes an error that occurs while parsing command line input.</summary>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseError.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:System.CommandLine.Parsing.ParseError.Message">
      <summary>A message to explain the error to a user.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.ParseError.SymbolResult">
      <summary>The symbol result detailing the symbol that failed to parse and the tokens involved.</summary>
    </member>
    <member name="T:System.CommandLine.Parsing.Parser">
      <summary>Parses command line input.</summary>
    </member>
    <member name="M:System.CommandLine.Parsing.Parser.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.CommandLine.Parsing.Parser" /> class using the default <see cref="T:System.CommandLine.RootCommand" />.</summary>
    </member>
    <member name="M:System.CommandLine.Parsing.Parser.#ctor(System.CommandLine.Command)">
      <summary>Initializes a new instance of the <see cref="T:System.CommandLine.Parsing.Parser" /> class using the specified command.</summary>
      <param name="command">The root command for the parser.</param>
    </member>
    <member name="M:System.CommandLine.Parsing.Parser.#ctor(System.CommandLine.CommandLineConfiguration)">
      <summary>Initializes a new instance of the <see cref="T:System.CommandLine.Parsing.Parser" /> class using the specified configuration.</summary>
      <param name="configuration">The configuration on which the parser's grammar and behaviors are based.</param>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:System.CommandLine.Parsing.Parser.Parse(System.Collections.Generic.IReadOnlyList{System.String},System.String)">
      <summary>Parses a list of arguments.</summary>
      <param name="arguments">The string array typically passed to a program's <c>Main</c> method.</param>
      <param name="rawInput">The complete command line input prior to splitting and tokenization. This input is not typically available when the parser is called from <c>Program.Main</c>. It is primarily used when calculating completions via the <c>dotnet-suggest</c> tool.</param>
      <returns>A <see cref="T:System.CommandLine.Parsing.ParseResult" /> providing details about the parse operation.</returns>
    </member>
    <member name="P:System.CommandLine.Parsing.Parser.Configuration">
      <summary>Gets the configuration on which the parser's grammar and behaviors are based.</summary>
    </member>
    <member name="T:System.CommandLine.Parsing.ParseResult">
      <summary>Describes the results of parsing a command line input based on a specific parser configuration.</summary>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseResult.FindResultFor(System.CommandLine.Argument)">
      <summary>Gets the result, if any, for the specified argument.</summary>
      <param name="argument">The argument for which to find a result.</param>
      <returns>A result for the specified argument, or <see langword="null" /> if it was not provided and no default was configured.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseResult.FindResultFor(System.CommandLine.Command)">
      <summary>Gets the result, if any, for the specified command.</summary>
      <param name="command">The command for which to find a result.</param>
      <returns>A result for the specified command, or <see langword="null" /> if it was not provided.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseResult.FindResultFor(System.CommandLine.Option)">
      <summary>Gets the result, if any, for the specified option.</summary>
      <param name="option">The option for which to find a result.</param>
      <returns>A result for the specified option, or <see langword="null" /> if it was not provided and no default was configured.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseResult.FindResultFor(System.CommandLine.Symbol)">
      <summary>Gets the result, if any, for the specified symbol.</summary>
      <param name="symbol">The symbol for which to find a result.</param>
      <returns>A result for the specified symbol, or <see langword="null" /> if it was not provided and no default was configured.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseResult.GetCompletionContext">
      <summary>Gets the completion context for the parse result.</summary>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseResult.GetCompletions(System.Nullable{System.Int32})">
      <summary>Gets completions based on a given parse result.</summary>
      <param name="position">The position at which completions are requested.</param>
      <returns>A set of completions for completion.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseResult.GetValueForArgument(System.CommandLine.Argument)">
      <summary>Gets the parsed or default value for the specified argument.</summary>
      <param name="argument">The argument for which to get a value.</param>
      <returns>The parsed value or a configured default.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseResult.GetValueForArgument``1(System.CommandLine.Argument{``0})">
      <summary>Gets the parsed or default value for the specified argument.</summary>
      <param name="argument">The argument for which to get a value.</param>
      <typeparam name="T" />
      <returns>The parsed value or a configured default.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseResult.GetValueForOption(System.CommandLine.Option)">
      <summary>Gets the parsed or default value for the specified option.</summary>
      <param name="option">The option for which to get a value.</param>
      <returns>The parsed value or a configured default.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseResult.GetValueForOption``1(System.CommandLine.Option{``0})">
      <summary>Gets the parsed or default value for the specified option.</summary>
      <param name="option">The option for which to get a value.</param>
      <typeparam name="T" />
      <returns>The parsed value or a configured default.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseResult.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:System.CommandLine.Parsing.ParseResult.CommandResult">
      <summary>A result indicating the command specified in the command line input.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.ParseResult.Directives">
      <summary>Gets the directives found while parsing command line input.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.ParseResult.Errors">
      <summary>Gets the parse errors found while parsing command line input.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.ParseResult.Parser">
      <summary>The parser used to produce the parse result.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.ParseResult.RootCommandResult">
      <summary>Gets the root command result.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.ParseResult.Tokens">
      <summary>Gets the tokens identified while parsing command line input.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.ParseResult.UnmatchedTokens">
      <summary>Gets the list of tokens used on the command line that were not matched by the parser.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.ParseResult.UnparsedTokens">
      <summary>Gets the list of tokens used on the command line that were ignored by the parser.</summary>
    </member>
    <member name="T:System.CommandLine.Parsing.ParseResultExtensions">
      <summary>Provides extension methods for parse results.</summary>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseResultExtensions.Diagram(System.CommandLine.Parsing.ParseResult)">
      <summary>Formats a string explaining a parse result.</summary>
      <param name="parseResult">The parse result to be diagrammed.</param>
      <returns>A string containing a diagram of the parse result.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseResultExtensions.HasOption(System.CommandLine.Parsing.ParseResult,System.CommandLine.Option)">
      <summary>Indicates whether a given option is present in the parse result.</summary>
      <param name="parseResult">The parse result to check for the presence of the option.</param>
      <param name="option">The option to check for the presence of.</param>
      <returns>
        <see langword="true" /> if the option is present; otherwise,  <see langword="false" />.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseResultExtensions.Invoke(System.CommandLine.Parsing.ParseResult,System.CommandLine.IConsole)">
      <summary>Invokes the appropriate command handler for a parsed command line input.</summary>
      <param name="parseResult">A parse result on which the invocation is based.</param>
      <param name="console">A console to which output can be written. By default, <see cref="T:System.Console" /> is used.</param>
      <returns>A value that can be used as a process exit code.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParseResultExtensions.InvokeAsync(System.CommandLine.Parsing.ParseResult,System.CommandLine.IConsole)">
      <summary>Invokes the appropriate command handler for a parsed command line input.</summary>
      <param name="parseResult">A parse result on which the invocation is based.</param>
      <param name="console">A console to which output can be written. By default, <see cref="T:System.Console" /> is used.</param>
      <returns>A task whose result can be used as a process exit code.</returns>
    </member>
    <member name="T:System.CommandLine.Parsing.ParserExtensions">
      <summary>Provides extension methods for parsers.</summary>
    </member>
    <member name="M:System.CommandLine.Parsing.ParserExtensions.Invoke(System.CommandLine.Parsing.Parser,System.String,System.CommandLine.IConsole)">
      <summary>Parses a command line string value and invokes the handler for the indicated command.</summary>
      <param name="parser" />
      <param name="commandLine" />
      <param name="console" />
      <returns>The exit code for the invocation.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParserExtensions.Invoke(System.CommandLine.Parsing.Parser,System.String[],System.CommandLine.IConsole)">
      <summary>Parses a command line string array and invokes the handler for the indicated command.</summary>
      <param name="parser" />
      <param name="args" />
      <param name="console" />
      <returns>The exit code for the invocation.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParserExtensions.InvokeAsync(System.CommandLine.Parsing.Parser,System.String,System.CommandLine.IConsole)">
      <summary>Parses a command line string value and invokes the handler for the indicated command.</summary>
      <param name="parser" />
      <param name="commandLine" />
      <param name="console" />
      <returns>The exit code for the invocation.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParserExtensions.InvokeAsync(System.CommandLine.Parsing.Parser,System.String[],System.CommandLine.IConsole)">
      <summary>Parses a command line string array and invokes the handler for the indicated command.</summary>
      <param name="parser" />
      <param name="args" />
      <param name="console" />
      <returns>The exit code for the invocation.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.ParserExtensions.Parse(System.CommandLine.Parsing.Parser,System.String)">
      <summary>Parses a command line string.</summary>
      <param name="parser" />
      <param name="commandLine" />
    </member>
    <member name="T:System.CommandLine.Parsing.SymbolResult">
      <summary>A result produced during parsing for a specific symbol.</summary>
    </member>
    <member name="M:System.CommandLine.Parsing.SymbolResult.FindResultFor(System.CommandLine.Argument)">
      <summary>Finds a result for the specific argument anywhere in the parse tree, including parent and child symbol results.</summary>
      <param name="argument">The argument for which to find a result.</param>
      <returns>An argument result if the argument was matched by the parser or has a default value; otherwise, <c>null</c>.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.SymbolResult.FindResultFor(System.CommandLine.Command)">
      <summary>Finds a result for the specific command anywhere in the parse tree, including parent and child symbol results.</summary>
      <param name="command">The command for which to find a result.</param>
      <returns>An command result if the command was matched by the parser; otherwise, <c>null</c>.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.SymbolResult.FindResultFor(System.CommandLine.Option)">
      <summary>Finds a result for the specific option anywhere in the parse tree, including parent and child symbol results.</summary>
      <param name="option">The option for which to find a result.</param>
      <returns>An option result if the option was matched by the parser or has a default value; otherwise, <c>null</c>.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.SymbolResult.GetValueForArgument(System.CommandLine.Argument)">
      <summary>Gets the parsed or default value for the specified argument.</summary>
      <param name="argument">The argument for which to get a value.</param>
      <returns>The parsed value or a configured default.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.SymbolResult.GetValueForArgument``1(System.CommandLine.Argument{``0})">
      <summary>Gets the parsed or default value for the specified argument.</summary>
      <param name="argument">The argument for which to get a value.</param>
      <typeparam name="T" />
      <returns>The parsed value or a configured default.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.SymbolResult.GetValueForOption(System.CommandLine.Option)">
      <summary>Gets the parsed or default value for the specified option.</summary>
      <param name="option">The option for which to get a value.</param>
      <returns>The parsed value or a configured default.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.SymbolResult.GetValueForOption``1(System.CommandLine.Option{``0})">
      <summary>Gets the parsed or default value for the specified option.</summary>
      <param name="option">The option for which to get a value.</param>
      <typeparam name="T" />
      <returns>The parsed value or a configured default.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.SymbolResult.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:System.CommandLine.Parsing.SymbolResult.Children">
      <summary>Child symbol results in the parse tree.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.SymbolResult.ErrorMessage">
      <summary>An error message for this symbol result.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.SymbolResult.LocalizationResources">
      <summary>Localization resources used to produce messages for this symbol result.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.SymbolResult.Parent">
      <summary>The parent symbol result in the parse tree.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.SymbolResult.Symbol">
      <summary>The symbol to which the result applies.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.SymbolResult.Tokens">
      <summary>The list of tokens associated with this symbol result during parsing.</summary>
    </member>
    <member name="T:System.CommandLine.Parsing.Token">
      <summary>A unit of significant text on the command line.</summary>
    </member>
    <member name="M:System.CommandLine.Parsing.Token.#ctor(System.String,System.CommandLine.Parsing.TokenType,System.CommandLine.Symbol)">
      <param name="value">The string value of the token.</param>
      <param name="type">The type of the token.</param>
      <param name="symbol">The symbol represented by the token</param>
    </member>
    <member name="M:System.CommandLine.Parsing.Token.Equals(System.CommandLine.Parsing.Token)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.Token.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <code data-dev-comment-type="langword">true</code> if the specified object  is equal to the current object; otherwise, <code data-dev-comment-type="langword">false</code>.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.Token.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.Token.op_Equality(System.CommandLine.Parsing.Token,System.CommandLine.Parsing.Token)">
      <summary>Checks if two specified <see cref="T:System.CommandLine.Parsing.Token" /> instances have the same value.</summary>
      <param name="left">The first <see cref="T:System.CommandLine.Parsing.Token" />.</param>
      <param name="right">The second <see cref="T:System.CommandLine.Parsing.Token" />.</param>
      <returns>
        <see langword="true" /> if the objects are equal.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.Token.op_Inequality(System.CommandLine.Parsing.Token,System.CommandLine.Parsing.Token)">
      <summary>Checks if two specified <see cref="T:System.CommandLine.Parsing.Token" /> instances have different values.</summary>
      <param name="left">The first <see cref="T:System.CommandLine.Parsing.Token" />.</param>
      <param name="right">The second <see cref="T:System.CommandLine.Parsing.Token" />.</param>
      <returns>
        <see langword="true" /> if the objects are not equal.</returns>
    </member>
    <member name="M:System.CommandLine.Parsing.Token.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:System.CommandLine.Parsing.Token.Type">
      <summary>The type of the token.</summary>
    </member>
    <member name="P:System.CommandLine.Parsing.Token.Value">
      <summary>The string value of the token.</summary>
    </member>
    <member name="T:System.CommandLine.Parsing.TokenType">
      <summary>Identifies the type of a <see cref="T:System.CommandLine.Parsing.Token" />.</summary>
    </member>
    <member name="F:System.CommandLine.Parsing.TokenType.Argument">
      <summary>An argument token.</summary>
    </member>
    <member name="F:System.CommandLine.Parsing.TokenType.Command">
      <summary>A command token.</summary>
    </member>
    <member name="F:System.CommandLine.Parsing.TokenType.Directive">
      <summary>A directive token.</summary>
    </member>
    <member name="F:System.CommandLine.Parsing.TokenType.DoubleDash">
      <summary>A double dash (<c>--</c>) token, which changes the meaning of subsequent tokens.</summary>
    </member>
    <member name="F:System.CommandLine.Parsing.TokenType.Option">
      <summary>An option token.</summary>
    </member>
    <member name="F:System.CommandLine.Parsing.TokenType.Unparsed">
      <summary>A token following <see cref="F:System.CommandLine.Parsing.TokenType.DoubleDash" /> when <see cref="P:System.CommandLine.CommandLineConfiguration.EnableLegacyDoubleDashBehavior" /> is set to <see langword="true" />.</summary>
    </member>
    <member name="T:System.CommandLine.Parsing.TryReplaceToken">
      <summary>Replaces a token with one or more other tokens prior to parsing.</summary>
      <param name="tokenToReplace" />
      <param name="replacementTokens" />
      <param name="errorMessage" />
    </member>
    <member name="T:System.CommandLine.Parsing.ValidateSymbolResult`1">
      <summary>A delegate used to validate symbol results during parsing.</summary>
      <param name="symbolResult">The symbol result</param>
      <typeparam name="T">The type of the <see cref="T:System.CommandLine.Parsing.SymbolResult" />.</typeparam>
    </member>
    <member name="T:System.CommandLine.RootCommand">
      <summary>Represents the main action that the application performs.</summary>
    </member>
    <member name="M:System.CommandLine.RootCommand.#ctor(System.String)">
      <param name="description">The description of the command, shown in help.</param>
    </member>
    <member name="P:System.CommandLine.RootCommand.ExecutableName">
      <summary>The name of the currently running executable.</summary>
    </member>
    <member name="P:System.CommandLine.RootCommand.ExecutablePath">
      <summary>The path to the currently running executable.</summary>
    </member>
    <member name="T:System.CommandLine.Symbol">
      <summary>Defines a named symbol that resides in a hierarchy with parent and child symbols.</summary>
    </member>
    <member name="M:System.CommandLine.Symbol.GetCompletions">
      <summary>Gets completions for the symbol.</summary>
    </member>
    <member name="M:System.CommandLine.Symbol.GetCompletions(System.CommandLine.Completions.CompletionContext)">
      <summary>Gets the suggested values for command line completion.</summary>
      <param name="context" />
      <returns>A list of completion items.</returns>
    </member>
    <member name="M:System.CommandLine.Symbol.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:System.CommandLine.Symbol.Description">
      <summary>Gets or sets the description of the symbol.</summary>
    </member>
    <member name="P:System.CommandLine.Symbol.IsHidden">
      <summary>Gets or sets a value indicating whether the symbol is hidden.</summary>
    </member>
    <member name="P:System.CommandLine.Symbol.Name">
      <summary>Gets or sets the name of the symbol.</summary>
    </member>
    <member name="P:System.CommandLine.Symbol.Parents">
      <summary>Gets the parent symbols.</summary>
    </member>
  </members>
</doc>