<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.CompilerServices.Unsafe</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.CompilerServices.Unsafe">
      <summary>Contains generic, low-level functionality for manipulating managed and unmanaged pointers.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)">
      <summary>Adds an offset to the given managed pointer.</summary>
      <param name="source">The managed pointer to add the offset to.</param>
      <param name="elementOffset">The offset to add.</param>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>A new managed pointer that reflects the addition of the specified offset to the source pointer.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)">
      <summary>Adds an element offset to the given managed pointer.</summary>
      <param name="source">The managed pointer to add the offset to.</param>
      <param name="elementOffset">The offset to add.</param>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>A new managed pointer that reflects the addition of the specified offset to the source pointer.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.UIntPtr)">
      <summary>Adds an element offset to the given managed pointer.</summary>
      <param name="source">The managed pointer to add the offset to.</param>
      <param name="elementOffset">The offset to add.</param>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>A new managed pointer that reflects the addition of the specified offset to the source pointer.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)">
      <summary>Adds an element offset to the given unmanaged pointer.</summary>
      <param name="source">The unmanaged pointer to add the offset to.</param>
      <param name="elementOffset">The offset to add.</param>
      <typeparam name="T">The type whose size will be used as a scale factor for <paramref name="elementOffset" />.</typeparam>
      <returns>A new unmanaged pointer that reflects the addition of the specified offset to the source pointer.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)">
      <summary>Adds a byte offset to the given managed pointer.</summary>
      <param name="source">The managed pointer to add the offset to.</param>
      <param name="byteOffset">The offset to add.</param>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>A new managed pointer that reflects the addition of the specified byte offset to the source pointer.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.UIntPtr)">
      <summary>Adds a byte offset to the given managed pointer.</summary>
      <param name="source">The managed pointer to add the offset to.</param>
      <param name="byteOffset">The offset to add.</param>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>A new managed pointer that reflects the addition of the specified byte offset to the source pointer.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)">
      <summary>Determines whether the specified managed pointers point to the same location.</summary>
      <param name="left">The first managed pointer to compare.</param>
      <param name="right">The second managed pointer to compare.</param>
      <typeparam name="T">The elemental type of the managed pointers.</typeparam>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> point to the same location; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)">
      <summary>Casts the given object to the specified type.</summary>
      <param name="o">The object to cast.</param>
      <typeparam name="T">The type which the object will be cast to.</typeparam>
      <returns>The original object, cast to the given type.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)">
      <summary>Reinterprets the given managed pointer as a new managed pointer to a value of type <typeparamref name="TTo" />.</summary>
      <param name="source">The managed pointer to reinterpret.</param>
      <typeparam name="TFrom">The type of managed pointer to reinterpret.</typeparam>
      <typeparam name="TTo">The desired type of the managed pointer.</typeparam>
      <returns>A managed pointer to a value of type <typeparamref name="TTo" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)">
      <summary>Converts a managed pointer into an unmanaged pointer.</summary>
      <param name="value">The managed pointer to convert.</param>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>An unmanaged pointer corresponding to the original source pointer.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)">
      <summary>Reinterprets the given read-only reference as a mutable reference.</summary>
      <param name="source">The read-only reference to reinterpret.</param>
      <typeparam name="T">The underlying type of the reference.</typeparam>
      <returns>A mutable reference to a value of type <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)">
      <summary>Converts an unmanaged pointer into a managed pointer to a value of type <typeparamref name="T" />.</summary>
      <param name="source">The unmanaged pointer to convert.</param>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>A managed pointer to a value of type <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)">
      <summary>Determines the byte offset from origin to target from the given managed pointers.</summary>
      <param name="origin">The managed pointer to the origin.</param>
      <param name="target">The managed pointer to the target.</param>
      <typeparam name="T">The elemental type of the managed pointers.</typeparam>
      <returns>The byte offset from origin to target, that is, <paramref name="target" /> - <paramref name="origin" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)">
      <summary>Copies a value of type <typeparamref name="T" /> to the given location.</summary>
      <param name="destination">The location to copy to.</param>
      <param name="source">A pointer to the value to copy.</param>
      <typeparam name="T">The type of value to copy.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)">
      <summary>Copies a value of type <typeparamref name="T" /> to the given location.</summary>
      <param name="destination">The location to copy to.</param>
      <param name="source">A reference to the value to copy.</param>
      <typeparam name="T">The type of value to copy.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)">
      <summary>Copies bytes from the source address to the destination address.</summary>
      <param name="destination">The managed pointer corresponding to the destination address to copy to.</param>
      <param name="source">The managed pointer corresponding to the source address to copy from.</param>
      <param name="byteCount">The number of bytes to copy.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)">
      <summary>Copies bytes from the source address to the destination address.</summary>
      <param name="destination">The unmanaged pointer corresponding to the destination address to copy to.</param>
      <param name="source">The unmanaged pointer corresponding to the source address to copy from.</param>
      <param name="byteCount">The number of bytes to copy.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)">
      <summary>Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</summary>
      <param name="destination">The managed pointer corresponding to the destination address to copy to.</param>
      <param name="source">The managed pointer corresponding to the source address to copy from.</param>
      <param name="byteCount">The number of bytes to copy.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)">
      <summary>Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</summary>
      <param name="destination">The unmanaged pointer corresponding to the destination address to copy to.</param>
      <param name="source">The unmanaged pointer corresponding to the source address to copy from.</param>
      <param name="byteCount">The number of bytes to copy.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)">
      <summary>Initializes a block of memory at the given location with a given initial value.</summary>
      <param name="startAddress">The managed pointer referencing the start of the memory block to initialize.</param>
      <param name="value">The value to initialize all bytes of the memory block to.</param>
      <param name="byteCount">The number of bytes to initialize.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)">
      <summary>Initializes a block of memory at the given location with a given initial value.</summary>
      <param name="startAddress">The unmanaged pointer referencing the start of the memory block to initialize.</param>
      <param name="value">The value to initialize all bytes of the memory block to.</param>
      <param name="byteCount">The number of bytes to initialize.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)">
      <summary>Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</summary>
      <param name="startAddress">The managed pointer referencing the start of the memory block to initialize.</param>
      <param name="value">The value to initialize all bytes of the memory block to.</param>
      <param name="byteCount">The number of bytes to initialize.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)">
      <summary>Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</summary>
      <param name="startAddress">The unmanaged pointer referencing the start of the memory block to initialize.</param>
      <param name="value">The value to initialize all bytes of the memory block to.</param>
      <param name="byteCount">The number of bytes to initialize.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)">
      <summary>Returns a value that indicates whether a specified managed pointer is greater than another specified managed pointer.</summary>
      <param name="left">The first managed pointer to compare.</param>
      <param name="right">The second managed pointer to compare.</param>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)">
      <summary>Returns a value that indicates whether a specified managed pointer is less than another specified managed pointer.</summary>
      <param name="left">The first managed pointer to compare.</param>
      <param name="right">The second managed pointer to compare.</param>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsNullRef``1(``0@)">
      <summary>Determines if a given managed pointer to a value of type <typeparamref name="T" /> is a null reference.</summary>
      <param name="source">The managed pointer to check.</param>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>
        <see langword="true" /> if <paramref name="source" /> is a null reference; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.NullRef``1">
      <summary>Returns a null managed pointer to a value of type <typeparamref name="T" />.</summary>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>A null managed pointer to a value of type <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)">
      <summary>Reads a value of type <typeparamref name="T" /> from the given location.</summary>
      <param name="source">An unmanaged pointer containing the address to read from.</param>
      <typeparam name="T">The type of the value to read.</typeparam>
      <returns>A value of type <typeparamref name="T" /> read from the given location.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)">
      <summary>Reads a value of type <typeparamref name="T" /> from the given address without assuming architecture dependent alignment of the source address.</summary>
      <param name="source">A managed pointer containing the address to read from.</param>
      <typeparam name="T">The type of the value to read.</typeparam>
      <returns>A value of type <typeparamref name="T" /> read from the given address.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)">
      <summary>Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the source address.</summary>
      <param name="source">An unmanaged pointer containing the address to read from.</param>
      <typeparam name="T">The type of the value to read.</typeparam>
      <returns>A value of type <typeparamref name="T" /> read from the given location.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1">
      <summary>Returns the size of a value of the given type parameter.</summary>
      <typeparam name="T">The type whose size is to be retrieved.</typeparam>
      <returns>The size, in bytes, of a value of type <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SkipInit``1(``0@)">
      <summary>Bypasses definite assignment rules for a given reference.</summary>
      <param name="value">The reference whose initialization should be skipped.</param>
      <typeparam name="T">The type of the reference.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)">
      <summary>Subtracts an offset from the given managed pointer.</summary>
      <param name="source">The managed pointer to subtract the offset from.</param>
      <param name="elementOffset">The offset to subtract.</param>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>A new managed pointer that reflects the subtraction of the specified offset from the source pointer.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)">
      <summary>Subtracts an element offset from the given managed pointer.</summary>
      <param name="source">The managed pointer to subtract the offset from.</param>
      <param name="elementOffset">The offset to subtract.</param>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>A new managed pointer that reflects the subtraction of the specified offset from the source pointer.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.UIntPtr)">
      <summary>Subtracts an element offset from the given managed pointer.</summary>
      <param name="source">The managed pointer to subtract the offset from.</param>
      <param name="elementOffset">The offset to subtract.</param>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>A new managed pointer that reflects the subtraction of the specified offset from the source pointer.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)">
      <summary>Subtracts an element offset from the given unmanaged pointer.</summary>
      <param name="source">The unmanaged pointer to subtract the offset from.</param>
      <param name="elementOffset">The offset to subtract.</param>
      <typeparam name="T">The type whose size will be used as a scale factor for <paramref name="elementOffset" />.</typeparam>
      <returns>A new unmanaged pointer that reflects the subtraction of the specified offset from the source pointer.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)">
      <summary>Subtracts a byte offset from the given managed pointer.</summary>
      <param name="source">The managed pointer to subtract the offset from.</param>
      <param name="byteOffset">The offset to subtract.</param>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>A new managed pointer that reflects the subtraction of the specified byte offset from the source pointer.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.UIntPtr)">
      <summary>Subtracts a byte offset from the given managed pointer.</summary>
      <param name="source">The managed pointer to subtract the offset from.</param>
      <param name="byteOffset">The offset to subtract.</param>
      <typeparam name="T">The elemental type of the managed pointer.</typeparam>
      <returns>A new managed pointer that reflects the subtraction of the specified byte offset from the source pointer.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Unbox``1(System.Object)">
      <summary>Returns a <see langword="mutable ref" /> to a boxed value.</summary>
      <param name="box">The value to unbox.</param>
      <typeparam name="T">The type to be unboxed.</typeparam>
      <exception cref="T:System.NullReferenceException">
        <paramref name="box" /> is <see langword="null" />, and <typeparamref name="T" /> is a non-nullable value type.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="box" /> is not a boxed value type.

-or-

<paramref name="box" /> is not a boxed <typeparamref name="T" />.</exception>
      <exception cref="T:System.TypeLoadException">
        <typeparamref name="T" /> cannot be found.</exception>
      <returns>A <see langword="mutable ref" /> to the boxed value <paramref name="box" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)">
      <summary>Writes a value of type <typeparamref name="T" /> to the given location.</summary>
      <param name="destination">The location to write to.</param>
      <param name="value">The value to write.</param>
      <typeparam name="T">The type of the value to write.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)">
      <summary>Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the destination address.</summary>
      <param name="destination">A managed pointer containing the address to write to.</param>
      <param name="value">The value to write.</param>
      <typeparam name="T">The type of the value to write.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)">
      <summary>Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the destination address.</summary>
      <param name="destination">A managed pointer containing the address to write to.</param>
      <param name="value">The value to write.</param>
      <typeparam name="T">The type of the value to write.</typeparam>
    </member>
  </members>
</doc>